import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-OL3AADLO.js";

// node_modules/vue-file-agent/node_modules/vue/dist/vue.runtime.esm.js
var vue_runtime_esm_exports = {};
__export(vue_runtime_esm_exports, {
  default: () => vue_runtime_esm_default
});
function isUndef(v) {
  return v === void 0 || v === null;
}
function isDef(v) {
  return v !== void 0 && v !== null;
}
function isTrue(v) {
  return v === true;
}
function isFalse(v) {
  return v === false;
}
function isPrimitive(value) {
  return typeof value === "string" || typeof value === "number" || typeof value === "symbol" || typeof value === "boolean";
}
function isObject(obj) {
  return obj !== null && typeof obj === "object";
}
function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
function isPlainObject(obj) {
  return _toString.call(obj) === "[object Object]";
}
function isRegExp(v) {
  return _toString.call(v) === "[object RegExp]";
}
function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}
function isPromise(val) {
  return isDef(val) && typeof val.then === "function" && typeof val.catch === "function";
}
function toString(val) {
  return val == null ? "" : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
function makeMap(str, expectsLowerCase) {
  var map = /* @__PURE__ */ Object.create(null);
  var list = str.split(",");
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? function(val) {
    return map[val.toLowerCase()];
  } : function(val) {
    return map[val];
  };
}
function remove(arr, item) {
  if (arr.length) {
    var index2 = arr.indexOf(item);
    if (index2 > -1) {
      return arr.splice(index2, 1);
    }
  }
}
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
function cached(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }
  boundFn._length = fn.length;
  return boundFn;
}
function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}
function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret;
}
function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}
function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}
function noop(a, b, c) {
}
function looseEqual(a, b) {
  if (a === b) {
    return true;
  }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function(e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function(key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }
  return -1;
}
function once(fn) {
  var called = false;
  return function() {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
function isReserved(str) {
  var c = (str + "").charCodeAt(0);
  return c === 36 || c === 95;
}
function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }
  var segments = path.split(".");
  return function(obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }
      obj = obj[segments[i]];
    }
    return obj;
  };
}
function isNative(Ctor) {
  return typeof Ctor === "function" && /native code/.test(Ctor.toString());
}
function pushTarget(target2) {
  targetStack.push(target2);
  Dep.target = target2;
}
function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
function createTextVNode(val) {
  return new VNode(void 0, void 0, void 0, String(val));
}
function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
function toggleObserving(value) {
  shouldObserve = value;
}
function protoAugment(target2, src) {
  target2.__proto__ = src;
}
function copyAugment(target2, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target2, key, src[key]);
  }
}
function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }
  var ob;
  if (hasOwn(value, "__ob__") && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob;
}
function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return;
  }
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }
  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      if (customSetter) {
        customSetter();
      }
      if (getter && !setter) {
        return;
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
function set(target2, key, val) {
  if (isUndef(target2) || isPrimitive(target2)) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target2);
  }
  if (Array.isArray(target2) && isValidArrayIndex(key)) {
    target2.length = Math.max(target2.length, key);
    target2.splice(key, 1, val);
    return val;
  }
  if (key in target2 && !(key in Object.prototype)) {
    target2[key] = val;
    return val;
  }
  var ob = target2.__ob__;
  if (target2._isVue || ob && ob.vmCount) {
    warn("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.");
    return val;
  }
  if (!ob) {
    target2[key] = val;
    return val;
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
function del(target2, key) {
  if (isUndef(target2) || isPrimitive(target2)) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target2);
  }
  if (Array.isArray(target2) && isValidArrayIndex(key)) {
    target2.splice(key, 1);
    return;
  }
  var ob = target2.__ob__;
  if (target2._isVue || ob && ob.vmCount) {
    warn("Avoid deleting properties on a Vue instance or its root $data - just set it to null.");
    return;
  }
  if (!hasOwn(target2, key)) {
    return;
  }
  delete target2[key];
  if (!ob) {
    return;
  }
  ob.dep.notify();
}
function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
function mergeData(to, from) {
  if (!from) {
    return to;
  }
  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    if (key === "__ob__") {
      continue;
    }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to;
}
function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    if (!childVal) {
      return parentVal;
    }
    if (!parentVal) {
      return childVal;
    }
    return function mergedDataFn() {
      return mergeData(typeof childVal === "function" ? childVal.call(this, this) : childVal, typeof parentVal === "function" ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      var instanceData = typeof childVal === "function" ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === "function" ? parentVal.call(vm, vm) : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}
function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}
function dedupeHooks(hooks2) {
  var res = [];
  for (var i = 0; i < hooks2.length; i++) {
    if (res.indexOf(hooks2[i]) === -1) {
      res.push(hooks2[i]);
    }
  }
  return res;
}
function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}
function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}
function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names should conform to valid custom element name in html5 specification.');
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn("Do not use built-in or reserved HTML elements as component id: " + name);
  }
}
function normalizeProps(options, vm) {
  var props2 = options.props;
  if (!props2) {
    return;
  }
  var res = {};
  var i, val, name;
  if (Array.isArray(props2)) {
    i = props2.length;
    while (i--) {
      val = props2[i];
      if (typeof val === "string") {
        name = camelize(val);
        res[name] = { type: null };
      } else if (true) {
        warn("props must be strings when using array syntax.");
      }
    }
  } else if (isPlainObject(props2)) {
    for (var key in props2) {
      val = props2[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : { type: val };
    }
  } else if (true) {
    warn('Invalid value for option "props": expected an Array or an Object, but got ' + toRawType(props2) + ".", vm);
  }
  options.props = res;
}
function normalizeInject(options, vm) {
  var inject = options.inject;
  if (!inject) {
    return;
  }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({ from: key }, val) : { from: val };
    }
  } else if (true) {
    warn('Invalid value for option "inject": expected an Array or an Object, but got ' + toRawType(inject) + ".", vm);
  }
}
function normalizeDirectives(options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === "function") {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}
function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn('Invalid value for option "' + name + '": expected an Object, but got ' + toRawType(value) + ".", vm);
  }
}
function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }
  if (typeof child === "function") {
    child = child.options;
  }
  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField(key2) {
    var strat = strats[key2] || defaultStrat;
    options[key2] = strat(parent[key2], child[key2], vm, key2);
  }
  return options;
}
function resolveAsset(options, type, id, warnMissing) {
  if (typeof id !== "string") {
    return;
  }
  var assets = options[type];
  if (hasOwn(assets, id)) {
    return assets[id];
  }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  }
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn("Failed to resolve " + type.slice(0, -1) + ": " + id, options);
  }
  return res;
}
function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, "default")) {
      value = false;
    } else if (value === "" || value === hyphenate(key)) {
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  if (value === void 0) {
    value = getPropDefaultValue(vm, prop, key);
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (true) {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}
function getPropDefaultValue(vm, prop, key) {
  if (!hasOwn(prop, "default")) {
    return void 0;
  }
  var def2 = prop.default;
  if (isObject(def2)) {
    warn('Invalid default value for prop "' + key + '": Props with type Object/Array must use a factory function to return the default value.', vm);
  }
  if (vm && vm.$options.propsData && vm.$options.propsData[key] === void 0 && vm._props[key] !== void 0) {
    return vm._props[key];
  }
  return typeof def2 === "function" && getType(prop.type) !== "Function" ? def2.call(vm) : def2;
}
function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i], vm);
      expectedTypes.push(assertedType.expectedType || "");
      valid = assertedType.valid;
    }
  }
  var haveExpectedTypes = expectedTypes.some(function(t) {
    return t;
  });
  if (!valid && haveExpectedTypes) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}
function assertType(value, type, vm) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    if (!valid && t === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isPlainObject(value);
  } else if (expectedType === "Array") {
    valid = Array.isArray(value);
  } else {
    try {
      valid = value instanceof type;
    } catch (e) {
      warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
      valid = false;
    }
  }
  return {
    valid,
    expectedType
  };
}
function getType(fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }
  return -1;
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = 'Invalid prop: type check failed for prop "' + name + '". Expected ' + expectedTypes.map(capitalize).join(", ");
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && isExplicable(typeof value) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + styleValue(value, expectedType);
  }
  message += ", got " + receivedType + " ";
  if (isExplicable(receivedType)) {
    message += "with value " + styleValue(value, receivedType) + ".";
  }
  return message;
}
function styleValue(value, type) {
  if (type === "String") {
    return '"' + value + '"';
  } else if (type === "Number") {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}
function isExplicable(value) {
  return EXPLICABLE_TYPES.some(function(elem) {
    return value.toLowerCase() === elem;
  });
}
function isBoolean() {
  var args = [], len = arguments.length;
  while (len--)
    args[len] = arguments[len];
  return args.some(function(elem) {
    return elem.toLowerCase() === "boolean";
  });
}
function handleError(err, vm, info) {
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while (cur = cur.$parent) {
        var hooks2 = cur.$options.errorCaptured;
        if (hooks2) {
          for (var i = 0; i < hooks2.length; i++) {
            try {
              var capture = hooks2[i].call(cur, err, vm, info) === false;
              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, "errorCaptured hook");
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}
function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function(e) {
        return handleError(e, vm, info + " (Promise/async)");
      });
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res;
}
function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      if (e !== err) {
        logError(e, null, "config.errorHandler");
      }
    }
  }
  logError(err, vm, info);
}
function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ': "' + err.toString() + '"', vm);
  }
  if ((inBrowser || inWeex) && typeof console !== "undefined") {
    console.error(err);
  } else {
    throw err;
  }
}
function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}
function nextTick(cb, ctx) {
  var _resolve;
  callbacks.push(function() {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, "nextTick");
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  if (!cb && typeof Promise !== "undefined") {
    return new Promise(function(resolve) {
      _resolve = resolve;
    });
  }
}
function traverse(val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}
function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return;
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns2 = invoker.fns;
    if (Array.isArray(fns2)) {
      var cloned = fns2.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      return invokeWithErrorHandling(fns2, null, arguments, vm, "v-on handler");
    }
  }
  invoker.fns = fns;
  return invoker;
}
function updateListeners(on, oldOn, add2, remove$$12, createOnceHandler2, vm) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn('Invalid handler for event "' + event.name + '": got ' + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler2(event.name, cur, event.capture);
      }
      add2(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$12(event.name, oldOn[name], event.capture);
    }
  }
}
function mergeVNodeHook(def2, hookKey, hook) {
  if (def2 instanceof VNode) {
    def2 = def2.data.hook || (def2.data.hook = {});
  }
  var invoker;
  var oldHook = def2[hookKey];
  function wrappedHook() {
    hook.apply(this, arguments);
    remove(invoker.fns, wrappedHook);
  }
  if (isUndef(oldHook)) {
    invoker = createFnInvoker([wrappedHook]);
  } else {
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }
  invoker.merged = true;
  def2[hookKey] = invoker;
}
function extractPropsFromVNodeData(data, Ctor, tag) {
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return;
  }
  var res = {};
  var attrs2 = data.attrs;
  var props2 = data.props;
  if (isDef(attrs2) || isDef(props2)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (true) {
        var keyInLowerCase = key.toLowerCase();
        if (key !== keyInLowerCase && attrs2 && hasOwn(attrs2, keyInLowerCase)) {
          tip('Prop "' + keyInLowerCase + '" is passed to component ' + formatComponentName(tag || Ctor) + ', but the declared prop name is "' + key + '". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "' + altKey + '" instead of "' + key + '".');
        }
      }
      checkProp(res, props2, key, altKey, true) || checkProp(res, attrs2, key, altKey, false);
    }
  }
  return res;
}
function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true;
    }
  }
  return false;
}
function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}
function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : void 0;
}
function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}
function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === "boolean") {
      continue;
    }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || "") + "_" + i);
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== "") {
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res;
}
function initProvide(vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === "function" ? provide.call(vm) : provide;
  }
}
function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function(key) {
      if (true) {
        defineReactive$$1(vm, key, result[key], function() {
          warn('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "' + key + '"', vm);
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}
function resolveInject(inject, vm) {
  if (inject) {
    var result = /* @__PURE__ */ Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (key === "__ob__") {
        continue;
      }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }
        source = source.$parent;
      }
      if (!source) {
        if ("default" in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === "function" ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn('Injection "' + key + '" not found', vm);
        }
      }
    }
    return result;
  }
}
function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);
      if (child.tag === "template") {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots;
}
function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === " ";
}
function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    return prevSlots;
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== "$") {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }
  def(res, "$stable", isStable);
  def(res, "$key", key);
  def(res, "$hasNormal", hasNormalSlots);
  return res;
}
function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === "object" && !Array.isArray(res) ? [res] : normalizeChildren(res);
    var vnode = res && res[0];
    return res && (!vnode || res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) ? void 0 : res;
  };
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized;
}
function proxyNormalSlot(slots, key) {
  return function() {
    return slots[key];
  };
}
function renderList(val, render4) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === "string") {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render4(val[i], i);
    }
  } else if (typeof val === "number") {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render4(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render4(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render4(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  ret._isVList = true;
  return ret;
}
function renderSlot(name, fallbackRender, props2, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    props2 = props2 || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn("slot v-bind without argument expects an Object", this);
      }
      props2 = extend(extend({}, bindObject), props2);
    }
    nodes = scopedSlotFn(props2) || (typeof fallbackRender === "function" ? fallbackRender() : fallbackRender);
  } else {
    nodes = this.$slots[name] || (typeof fallbackRender === "function" ? fallbackRender() : fallbackRender);
  }
  var target2 = props2 && props2.slot;
  if (target2) {
    return this.$createElement("template", { slot: target2 }, nodes);
  } else {
    return nodes;
  }
}
function resolveFilter(id) {
  return resolveAsset(this.$options, "filters", id, true) || identity;
}
function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
  return eventKeyCode === void 0;
}
function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      warn("v-bind without argument expects an Object or Array value", this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function(key2) {
        if (key2 === "class" || key2 === "style" || isReservedAttribute(key2)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key2) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key2);
        var hyphenatedKey = hyphenate(key2);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key2] = value[key2];
          if (isSync) {
            var on = data.on || (data.on = {});
            on["update:" + key2] = function($event) {
              value[key2] = $event;
            };
          }
        }
      };
      for (var key in value)
        loop(key);
    }
  }
  return data;
}
function renderStatic(index2, isInFor) {
  var cached2 = this._staticTrees || (this._staticTrees = []);
  var tree = cached2[index2];
  if (tree && !isInFor) {
    return tree;
  }
  tree = cached2[index2] = this.$options.staticRenderFns[index2].call(this._renderProxy, null, this);
  markStatic(tree, "__static__" + index2, false);
  return tree;
}
function markOnce(tree, index2, key) {
  markStatic(tree, "__once__" + index2 + (key ? "_" + key : ""), true);
  return tree;
}
function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== "string") {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}
function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn("v-on without argument expects an Object value", this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data;
}
function resolveScopedSlots(fns, res, hasDynamicKeys, contentHashKey) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    res.$key = contentHashKey;
  }
  return res;
}
function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === "string" && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== "" && key !== null) {
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }
  return baseObj;
}
function prependModifier(value, symbol) {
  return typeof value === "string" ? symbol + value : value;
}
function installRenderHelpers(target2) {
  target2._o = markOnce;
  target2._n = toNumber;
  target2._s = toString;
  target2._l = renderList;
  target2._t = renderSlot;
  target2._q = looseEqual;
  target2._i = looseIndexOf;
  target2._m = renderStatic;
  target2._f = resolveFilter;
  target2._k = checkKeyCodes;
  target2._b = bindObjectProps;
  target2._v = createTextVNode;
  target2._e = createEmptyVNode;
  target2._u = resolveScopedSlots;
  target2._g = bindObjectListeners;
  target2._d = bindDynamicKeys;
  target2._p = prependModifier;
}
function FunctionalRenderContext(data, props2, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options;
  var contextVm;
  if (hasOwn(parent, "_uid")) {
    contextVm = Object.create(parent);
    contextVm._original = parent;
  } else {
    contextVm = parent;
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props2;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function() {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }
    return this$1.$slots;
  };
  Object.defineProperty(this, "scopedSlots", {
    enumerable: true,
    get: function get3() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  });
  if (isCompiled) {
    this.$options = options;
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }
  if (options._scopeId) {
    this._c = function(a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode;
    };
  } else {
    this._c = function(a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}
function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props2 = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props2[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props2, data.attrs);
    }
    if (isDef(data.props)) {
      mergeProps(props2, data.props);
    }
  }
  var renderContext = new FunctionalRenderContext(data, props2, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);
  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res;
  }
}
function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone;
}
function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }
  var baseCtor = context.$options._base;
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }
  if (typeof Ctor !== "function") {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }
    return;
  }
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === void 0) {
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }
  data = data || {};
  resolveConstructorOptions(Ctor);
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  }
  var listeners = data.on;
  data.on = data.nativeOn;
  if (isTrue(Ctor.options.abstract)) {
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }
  installComponentHooks(data);
  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ""), data, void 0, void 0, void 0, context, { Ctor, propsData, listeners, tag, children }, asyncFactory);
  return vnode;
}
function createComponentInstanceForVnode(vnode, parent) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent
  };
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options);
}
function installComponentHooks(data) {
  var hooks2 = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks2[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks2[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}
function mergeHook$1(f1, f2) {
  var merged = function(a, b) {
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged;
}
function transformModel(options, data) {
  var prop = options.model && options.model.prop || "value";
  var event = options.model && options.model.event || "input";
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = void 0;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType);
}
function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\nAlways create fresh vnode data objects in each render!", context);
    return createEmptyVNode();
  }
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    return createEmptyVNode();
  }
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn("Avoid using non-primitive value as key, use string/number value instead.", context);
    }
  }
  if (Array.isArray(children) && typeof children[0] === "function") {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === "string") {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      if (isDef(data) && isDef(data.nativeOn) && data.tag !== "component") {
        warn("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">.", context);
      }
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, void 0, void 0, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, "components", tag))) {
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      vnode = new VNode(tag, data, children, void 0, void 0, context);
    }
  } else {
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }
    if (isDef(data)) {
      registerDeepBindings(data);
    }
    return vnode;
  } else {
    return createEmptyVNode();
  }
}
function applyNS(vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === "foreignObject") {
    ns = void 0;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== "svg")) {
        applyNS(child, ns, force);
      }
    }
  }
}
function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}
function initRender(vm) {
  vm._vnode = null;
  vm._staticTrees = null;
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode;
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  vm._c = function(a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  };
  vm.$createElement = function(a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  };
  var parentData = parentVnode && parentVnode.data;
  if (true) {
    defineReactive$$1(vm, "$attrs", parentData && parentData.attrs || emptyObject, function() {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, "$listeners", options._parentListeners || emptyObject, function() {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive$$1(vm, "$attrs", parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, "$listeners", options._parentListeners || emptyObject, null, true);
  }
}
function renderMixin(Vue2) {
  installRenderHelpers(Vue2.prototype);
  Vue2.prototype.$nextTick = function(fn) {
    return nextTick(fn, this);
  };
  Vue2.prototype._render = function() {
    var vm = this;
    var ref2 = vm.$options;
    var render4 = ref2.render;
    var _parentVnode = ref2._parentVnode;
    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    }
    vm.$vnode = _parentVnode;
    var vnode;
    try {
      currentRenderingInstance = vm;
      vnode = render4.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e2) {
          handleError(e2, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn("Multiple root nodes returned from render function. Render function should return a single root node.", vm);
      }
      vnode = createEmptyVNode();
    }
    vnode.parent = _parentVnode;
    return vnode;
  };
}
function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === "Module") {
    comp = comp.default;
  }
  return isObject(comp) ? base.extend(comp) : comp;
}
function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data, context, children, tag };
  return node;
}
function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }
  if (isDef(factory.resolved)) {
    return factory.resolved;
  }
  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    factory.owners.push(owner);
  }
  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }
  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on("hook:destroyed", function() {
      return remove(owners, owner);
    });
    var forceRender = function(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }
      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };
    var resolve = once(function(res2) {
      factory.resolved = ensureCtor(res2, baseCtor);
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function(reason) {
      warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ""));
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);
    if (isObject(res)) {
      if (isPromise(res)) {
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);
        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }
        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function() {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }
        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function() {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(true ? "timeout (" + res.timeout + "ms)" : null);
            }
          }, res.timeout);
        }
      }
    }
    sync = false;
    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
function initEvents(vm) {
  vm._events = /* @__PURE__ */ Object.create(null);
  vm._hasHookEvent = false;
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}
function add(event, fn) {
  target.$on(event, fn);
}
function remove$1(event, fn) {
  target.$off(event, fn);
}
function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}
function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = void 0;
}
function eventsMixin(Vue2) {
  var hookRE = /^hook:/;
  Vue2.prototype.$on = function(event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm;
  };
  Vue2.prototype.$once = function(event, fn) {
    var vm = this;
    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };
  Vue2.prototype.$off = function(event, fn) {
    var vm = this;
    if (!arguments.length) {
      vm._events = /* @__PURE__ */ Object.create(null);
      return vm;
    }
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm;
    }
    var cbs = vm._events[event];
    if (!cbs) {
      return vm;
    }
    if (!fn) {
      vm._events[event] = null;
      return vm;
    }
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }
    return vm;
  };
  Vue2.prototype.$emit = function(event) {
    var vm = this;
    if (true) {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip('Event "' + lowerCaseEvent + '" is emitted in component ' + formatComponentName(vm) + ' but the handler is registered for "' + event + '". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "' + hyphenate(event) + '" instead of "' + event + '".');
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = 'event handler for "' + event + '"';
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm;
  };
}
function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function() {
    activeInstance = prevActiveInstance;
  };
}
function initLifecycle(vm) {
  var options = vm.$options;
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }
  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}
function lifecycleMixin(Vue2) {
  Vue2.prototype._update = function(vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    if (!prevVnode) {
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false);
    } else {
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
  };
  Vue2.prototype.$forceUpdate = function() {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };
  Vue2.prototype.$destroy = function() {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return;
    }
    callHook(vm, "beforeDestroy");
    vm._isBeingDestroyed = true;
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    vm._isDestroyed = true;
    vm.__patch__(vm._vnode, null);
    callHook(vm, "destroyed");
    vm.$off();
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}
function mountComponent(vm, el, hydrating) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (true) {
      if (vm.$options.template && vm.$options.template.charAt(0) !== "#" || vm.$options.el || el) {
        warn("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.", vm);
      } else {
        warn("Failed to mount component: template or render function not defined.", vm);
      }
    }
  }
  callHook(vm, "beforeMount");
  var updateComponent;
  if (config.performance && mark) {
    updateComponent = function() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function() {
      vm._update(vm._render(), hydrating);
    };
  }
  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, "beforeUpdate");
      }
    }
  }, true);
  hydrating = false;
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, "mounted");
  }
  return vm;
}
function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  }
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key || !newScopedSlots && vm.$scopedSlots.$key);
  var needsForceUpdate = !!(renderChildren || vm.$options._renderChildren || hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode;
  if (vm._vnode) {
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props2 = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props;
      props2[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    vm.$options.propsData = propsData;
  }
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }
  if (true) {
    isUpdatingChildComponent = false;
  }
}
function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }
  return false;
}
function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, "activated");
  }
}
function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return;
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, "deactivated");
  }
}
function callHook(vm, hook) {
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit("hook:" + hook);
  }
  popTarget();
}
function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (true) {
    circular = {};
  }
  waiting = flushing = false;
}
function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;
  queue.sort(function(a, b) {
    return a.id - b.id;
  });
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn("You may have an infinite update loop " + (watcher.user ? 'in watcher with expression "' + watcher.expression + '"' : "in a component render function."), watcher.vm);
        break;
      }
    }
  }
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState();
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);
  if (devtools && config.devtools) {
    devtools.emit("flush");
  }
}
function callUpdatedHooks(queue2) {
  var i = queue2.length;
  while (i--) {
    var watcher = queue2[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, "updated");
    }
  }
}
function queueActivatedComponent(vm) {
  vm._inactive = false;
  activatedChildren.push(vm);
}
function callActivatedHooks(queue2) {
  for (var i = 0; i < queue2.length; i++) {
    queue2[i]._inactive = true;
    activateChildComponent(queue2[i], true);
  }
}
function queueWatcher(watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    if (!waiting) {
      waiting = true;
      if (!config.async) {
        flushSchedulerQueue();
        return;
      }
      nextTick(flushSchedulerQueue);
    }
  }
}
function proxy(target2, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) {
    initProps(vm, opts.props);
  }
  if (opts.methods) {
    initMethods(vm, opts.methods);
  }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true);
  }
  if (opts.computed) {
    initComputed(vm, opts.computed);
  }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}
function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props2 = vm._props = {};
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function(key2) {
    keys.push(key2);
    var value = validateProp(key2, propsOptions, propsData, vm);
    if (true) {
      var hyphenatedKey = hyphenate(key2);
      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn('"' + hyphenatedKey + '" is a reserved attribute and cannot be used as component prop.', vm);
      }
      defineReactive$$1(props2, key2, value, function() {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(`Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: "` + key2 + '"', vm);
        }
      });
    } else {
      defineReactive$$1(props2, key2, value);
    }
    if (!(key2 in vm)) {
      proxy(vm, "_props", key2);
    }
  };
  for (var key in propsOptions)
    loop(key);
  toggleObserving(true);
}
function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === "function" ? getData(data, vm) : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function", vm);
  }
  var keys = Object.keys(data);
  var props2 = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn('Method "' + key + '" has already been defined as a data property.', vm);
      }
    }
    if (props2 && hasOwn(props2, key)) {
      warn('The data property "' + key + '" is already declared as a prop. Use prop default value instead.', vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  observe(data, true);
}
function getData(data, vm) {
  pushTarget();
  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}
function initComputed(vm, computed) {
  var watchers = vm._computedWatchers = /* @__PURE__ */ Object.create(null);
  var isSSR = isServerRendering();
  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === "function" ? userDef : userDef.get;
    if (getter == null) {
      warn('Getter is missing for computed property "' + key + '".', vm);
    }
    if (!isSSR) {
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    }
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn('The computed property "' + key + '" is already defined in data.', vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn('The computed property "' + key + '" is already defined as a prop.', vm);
      } else if (vm.$options.methods && key in vm.$options.methods) {
        warn('The computed property "' + key + '" is already defined as a method.', vm);
      }
    }
  }
}
function defineComputed(target2, key, userDef) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === "function") {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function() {
      warn('Computed property "' + key + '" was assigned to but it has no setter.', this);
    };
  }
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value;
    }
  };
}
function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}
function initMethods(vm, methods) {
  var props2 = vm.$options.props;
  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== "function") {
        warn('Method "' + key + '" has type "' + typeof methods[key] + '" in the component definition. Did you reference the function correctly?', vm);
      }
      if (props2 && hasOwn(props2, key)) {
        warn('Method "' + key + '" has already been defined as a prop.', vm);
      }
      if (key in vm && isReserved(key)) {
        warn('Method "' + key + '" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.');
      }
    }
    vm[key] = typeof methods[key] !== "function" ? noop : bind(methods[key], vm);
  }
}
function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}
function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === "string") {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options);
}
function stateMixin(Vue2) {
  var dataDef = {};
  dataDef.get = function() {
    return this._data;
  };
  var propsDef = {};
  propsDef.get = function() {
    return this._props;
  };
  if (true) {
    dataDef.set = function() {
      warn("Avoid replacing instance root $data. Use nested data properties instead.", this);
    };
    propsDef.set = function() {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue2.prototype, "$data", dataDef);
  Object.defineProperty(Vue2.prototype, "$props", propsDef);
  Vue2.prototype.$set = set;
  Vue2.prototype.$delete = del;
  Vue2.prototype.$watch = function(expOrFn, cb, options) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      var info = 'callback for immediate watcher "' + watcher.expression + '"';
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }
    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
function initMixin(Vue2) {
  Vue2.prototype._init = function(options) {
    var vm = this;
    vm._uid = uid$3++;
    var startTag, endTag;
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    }
    vm._isVue = true;
    if (options && options._isComponent) {
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    if (true) {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, "beforeCreate");
    initInjections(vm);
    initState(vm);
    initProvide(vm);
    callHook(vm, "created");
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }
    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}
function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}
function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      Ctor.superOptions = superOptions;
      var modifiedOptions = resolveModifiedOptions(Ctor);
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options;
}
function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }
      modified[key] = latest[key];
    }
  }
  return modified;
}
function Vue(options) {
  if (!(this instanceof Vue)) {
    warn("Vue is a constructor and should be called with the `new` keyword");
  }
  this._init(options);
}
function initUse(Vue2) {
  Vue2.use = function(plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    }
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === "function") {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === "function") {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this;
  };
}
function initMixin$1(Vue2) {
  Vue2.mixin = function(mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
function initExtend(Vue2) {
  Vue2.cid = 0;
  var cid = 1;
  Vue2.extend = function(extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }
    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }
    var Sub = function VueComponent(options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub["super"] = Super;
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;
    ASSET_TYPES.forEach(function(type) {
      Sub[type] = Super[type];
    });
    if (name) {
      Sub.options.components[name] = Sub;
    }
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);
    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}
function initProps$1(Comp) {
  var props2 = Comp.options.props;
  for (var key in props2) {
    proxy(Comp.prototype, "_props", key);
  }
}
function initComputed$1(Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
function initAssetRegisters(Vue2) {
  ASSET_TYPES.forEach(function(type) {
    Vue2[type] = function(id, definition) {
      if (!definition) {
        return this.options[type + "s"][id];
      } else {
        if (type === "component") {
          validateComponentName(id);
        }
        if (type === "component" && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === "directive" && typeof definition === "function") {
          definition = { bind: definition, update: definition };
        }
        this.options[type + "s"][id] = definition;
        return definition;
      }
    };
  });
}
function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}
function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === "string") {
    return pattern.split(",").indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  return false;
}
function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var entry = cache[key];
    if (entry) {
      var name = entry.name;
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}
function pruneCacheEntry(cache, key, keys, current) {
  var entry = cache[key];
  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}
function initGlobalAPI(Vue2) {
  var configDef = {};
  configDef.get = function() {
    return config;
  };
  if (true) {
    configDef.set = function() {
      warn("Do not replace the Vue.config object, set individual fields instead.");
    };
  }
  Object.defineProperty(Vue2, "config", configDef);
  Vue2.util = {
    warn,
    extend,
    mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue2.set = set;
  Vue2.delete = del;
  Vue2.nextTick = nextTick;
  Vue2.observable = function(obj) {
    observe(obj);
    return obj;
  };
  Vue2.options = /* @__PURE__ */ Object.create(null);
  ASSET_TYPES.forEach(function(type) {
    Vue2.options[type + "s"] = /* @__PURE__ */ Object.create(null);
  });
  Vue2.options._base = Vue2;
  extend(Vue2.options.components, builtInComponents);
  initUse(Vue2);
  initMixin$1(Vue2);
  initExtend(Vue2);
  initAssetRegisters(Vue2);
}
function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode2 = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode2 = parentNode2.parent)) {
    if (parentNode2 && parentNode2.data) {
      data = mergeClassData(data, parentNode2.data);
    }
  }
  return renderClass(data.staticClass, data.class);
}
function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}
function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  return "";
}
function concat(a, b) {
  return a ? b ? a + " " + b : a : b || "";
}
function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }
  if (isObject(value)) {
    return stringifyObject(value);
  }
  if (typeof value === "string") {
    return value;
  }
  return "";
}
function stringifyArray(value) {
  var res = "";
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== "") {
      if (res) {
        res += " ";
      }
      res += stringified;
    }
  }
  return res;
}
function stringifyObject(value) {
  var res = "";
  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += " ";
      }
      res += key;
    }
  }
  return res;
}
function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return "svg";
  }
  if (tag === "math") {
    return "math";
  }
}
function isUnknownElement(tag) {
  if (!inBrowser) {
    return true;
  }
  if (isReservedTag(tag)) {
    return false;
  }
  tag = tag.toLowerCase();
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }
  var el = document.createElement(tag);
  if (tag.indexOf("-") > -1) {
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}
function query(el) {
  if (typeof el === "string") {
    var selected = document.querySelector(el);
    if (!selected) {
      warn("Cannot find element: " + el);
      return document.createElement("div");
    }
    return selected;
  } else {
    return el;
  }
}
function createElement$1(tagName2, vnode) {
  var elm = document.createElement(tagName2);
  if (tagName2 !== "select") {
    return elm;
  }
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== void 0) {
    elm.setAttribute("multiple", "multiple");
  }
  return elm;
}
function createElementNS(namespace, tagName2) {
  return document.createElementNS(namespaceMap[namespace], tagName2);
}
function createTextNode(text) {
  return document.createTextNode(text);
}
function createComment(text) {
  return document.createComment(text);
}
function insertBefore(parentNode2, newNode, referenceNode) {
  parentNode2.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
  node.removeChild(child);
}
function appendChild(node, child) {
  node.appendChild(child);
}
function parentNode(node) {
  return node.parentNode;
}
function nextSibling(node) {
  return node.nextSibling;
}
function tagName(node) {
  return node.tagName;
}
function setTextContent(node, text) {
  node.textContent = text;
}
function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, "");
}
function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) {
    return;
  }
  var vm = vnode.context;
  var ref2 = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref2);
    } else if (refs[key] === ref2) {
      refs[key] = void 0;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref2];
      } else if (refs[key].indexOf(ref2) < 0) {
        refs[key].push(ref2);
      }
    } else {
      refs[key] = ref2;
    }
  }
}
function sameVnode(a, b) {
  return a.key === b.key && a.asyncFactory === b.asyncFactory && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error));
}
function sameInputType(a, b) {
  if (a.tag !== "input") {
    return true;
  }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) {
      map[key] = i;
    }
  }
  return map;
}
function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules2 = backend.modules;
  var nodeOps2 = backend.nodeOps;
  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules2.length; ++j) {
      if (isDef(modules2[j][hooks[i]])) {
        cbs[hooks[i]].push(modules2[j][hooks[i]]);
      }
    }
  }
  function emptyNodeAt(elm) {
    return new VNode(nodeOps2.tagName(elm).toLowerCase(), {}, [], void 0, elm);
  }
  function createRmCb(childElm, listeners) {
    function remove$$12() {
      if (--remove$$12.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$12.listeners = listeners;
    return remove$$12;
  }
  function removeNode(el) {
    var parent = nodeOps2.parentNode(el);
    if (isDef(parent)) {
      nodeOps2.removeChild(parent, el);
    }
  }
  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function(ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }
  var creatingElmInVPre = 0;
  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index2) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    vnode.isRootInsert = !nested;
    if (createComponent2(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }
    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn("Unknown custom element: <" + tag + '> - did you register the component correctly? For recursive components, make sure to provide the "name" option.', vnode.context);
        }
      }
      vnode.elm = vnode.ns ? nodeOps2.createElementNS(vnode.ns, tag) : nodeOps2.createElement(tag, vnode);
      setScope(vnode);
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert2(parentElm, vnode.elm, refElm);
      }
      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps2.createComment(vnode.text);
      insert2(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps2.createTextNode(vnode.text);
      insert2(parentElm, vnode.elm, refElm);
    }
  }
  function createComponent2(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i2 = vnode.data;
    if (isDef(i2)) {
      var isReactivated = isDef(vnode.componentInstance) && i2.keepAlive;
      if (isDef(i2 = i2.hook) && isDef(i2 = i2.init)) {
        i2(vnode, false);
      }
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert2(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true;
      }
    }
  }
  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      registerRef(vnode);
      insertedVnodeQueue.push(vnode);
    }
  }
  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i2;
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i2 = innerNode.data) && isDef(i2 = i2.transition)) {
        for (i2 = 0; i2 < cbs.activate.length; ++i2) {
          cbs.activate[i2](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break;
      }
    }
    insert2(parentElm, vnode.elm, refElm);
  }
  function insert2(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps2.parentNode(ref$$1) === parent) {
          nodeOps2.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps2.appendChild(parent, elm);
      }
    }
  }
  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }
      for (var i2 = 0; i2 < children.length; ++i2) {
        createElm(children[i2], insertedVnodeQueue, vnode.elm, null, true, children, i2);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps2.appendChild(vnode.elm, nodeOps2.createTextNode(String(vnode.text)));
    }
  }
  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag);
  }
  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook;
    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }
      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  }
  function setScope(vnode) {
    var i2;
    if (isDef(i2 = vnode.fnScopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i2 = ancestor.context) && isDef(i2 = i2.$options._scopeId)) {
          nodeOps2.setStyleScope(vnode.elm, i2);
        }
        ancestor = ancestor.parent;
      }
    }
    if (isDef(i2 = activeInstance) && i2 !== vnode.context && i2 !== vnode.fnContext && isDef(i2 = i2.$options._scopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    }
  }
  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }
  function invokeDestroyHook(vnode) {
    var i2, j2;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.destroy)) {
        i2(vnode);
      }
      for (i2 = 0; i2 < cbs.destroy.length; ++i2) {
        cbs.destroy[i2](vnode);
      }
    }
    if (isDef(i2 = vnode.children)) {
      for (j2 = 0; j2 < vnode.children.length; ++j2) {
        invokeDestroyHook(vnode.children[j2]);
      }
    }
  }
  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          removeNode(ch.elm);
        }
      }
    }
  }
  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i2;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        rm.listeners += listeners;
      } else {
        rm = createRmCb(vnode.elm, listeners);
      }
      if (isDef(i2 = vnode.componentInstance) && isDef(i2 = i2._vnode) && isDef(i2.data)) {
        removeAndInvokeRemoveHook(i2, rm);
      }
      for (i2 = 0; i2 < cbs.remove.length; ++i2) {
        cbs.remove[i2](vnode, rm);
      }
      if (isDef(i2 = vnode.data.hook) && isDef(i2 = i2.remove)) {
        i2(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }
  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;
    var canMove = !removeOnly;
    if (true) {
      checkDuplicateKeys(newCh);
    }
    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx];
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldStartVnode.elm, nodeOps2.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) {
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = void 0;
            canMove && nodeOps2.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }
  function checkDuplicateKeys(children) {
    var seenKeys = {};
    for (var i2 = 0; i2 < children.length; i2++) {
      var vnode = children[i2];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }
  function findIdxInOld(node, oldCh, start, end) {
    for (var i2 = start; i2 < end; i2++) {
      var c = oldCh[i2];
      if (isDef(c) && sameVnode(node, c)) {
        return i2;
      }
    }
  }
  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index2, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    var elm = vnode.elm = oldVnode.elm;
    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return;
    }
    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }
    var i2;
    var data = vnode.data;
    if (isDef(data) && isDef(i2 = data.hook) && isDef(i2 = i2.prepatch)) {
      i2(oldVnode, vnode);
    }
    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i2 = 0; i2 < cbs.update.length; ++i2) {
        cbs.update[i2](oldVnode, vnode);
      }
      if (isDef(i2 = data.hook) && isDef(i2 = i2.update)) {
        i2(oldVnode, vnode);
      }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) {
          nodeOps2.setTextContent(elm, "");
        }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps2.setTextContent(elm, "");
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps2.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.postpatch)) {
        i2(oldVnode, vnode);
      }
    }
  }
  function invokeInsertHook(vnode, queue2, initial) {
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue2;
    } else {
      for (var i2 = 0; i2 < queue2.length; ++i2) {
        queue2[i2].data.hook.insert(queue2[i2]);
      }
    }
  }
  var hydrationBailed = false;
  var isRenderedModule = makeMap("attrs,class,staticClass,staticStyle,key");
  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i2;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;
    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    }
    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.init)) {
        i2(vnode, true);
      }
      if (isDef(i2 = vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          if (isDef(i2 = data) && isDef(i2 = i2.domProps) && isDef(i2 = i2.innerHTML)) {
            if (i2 !== elm.innerHTML) {
              if (typeof console !== "undefined" && !hydrationBailed) {
                hydrationBailed = true;
                console.warn("Parent: ", elm);
                console.warn("server innerHTML: ", i2);
                console.warn("client innerHTML: ", elm.innerHTML);
              }
              return false;
            }
          } else {
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }
              childNode = childNode.nextSibling;
            }
            if (!childrenMatch || childNode) {
              if (typeof console !== "undefined" && !hydrationBailed) {
                hydrationBailed = true;
                console.warn("Parent: ", elm);
                console.warn("Mismatching childNodes vs. VNodes: ", elm.childNodes, children);
              }
              return false;
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }
        if (!fullInvoke && data["class"]) {
          traverse(data["class"]);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true;
  }
  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf("vue-component") === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }
  return function patch2(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }
      return;
    }
    var isInitialPatch = false;
    var insertedVnodeQueue = [];
    if (isUndef(oldVnode)) {
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.");
            }
          }
          oldVnode = emptyNodeAt(oldVnode);
        }
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps2.parentNode(oldElm);
        createElm(vnode, insertedVnodeQueue, oldElm._leaveCb ? null : parentElm, nodeOps2.nextSibling(oldElm));
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i2 = 0; i2 < cbs.destroy.length; ++i2) {
              cbs.destroy[i2](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              var insert3 = ancestor.data.hook.insert;
              if (insert3.merged) {
                for (var i$2 = 1; i$2 < insert3.fns.length; i$2++) {
                  insert3.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }
    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}
function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      callHook$1(dir, "bind", vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, "update", vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }
  if (dirsWithInsert.length) {
    var callInsert = function() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], "inserted", vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, "insert", callInsert);
    } else {
      callInsert();
    }
  }
  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, "postpatch", function() {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], "componentUpdated", vnode, oldVnode);
      }
    });
  }
  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        callHook$1(oldDirs[key], "unbind", oldVnode, oldVnode, isDestroy);
      }
    }
  }
}
function normalizeDirectives$1(dirs, vm) {
  var res = /* @__PURE__ */ Object.create(null);
  if (!dirs) {
    return res;
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, "directives", dir.name, true);
  }
  return res;
}
function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join(".");
}
function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}
function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs2 = vnode.data.attrs || {};
  if (isDef(attrs2.__ob__)) {
    attrs2 = vnode.data.attrs = extend({}, attrs2);
  }
  for (key in attrs2) {
    cur = attrs2[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  }
  if ((isIE || isEdge) && attrs2.value !== oldAttrs.value) {
    setAttr(elm, "value", attrs2.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs2[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}
function setAttr(el, key, value, isInPre) {
  if (isInPre || el.tagName.indexOf("-") > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      value = key === "allowfullscreen" && el.tagName === "EMBED" ? "true" : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}
function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    if (isIE && !isIE9 && el.tagName === "TEXTAREA" && key === "placeholder" && value !== "" && !el.__ieph) {
      var blocker = function(e) {
        e.stopImmediatePropagation();
        el.removeEventListener("input", blocker);
      };
      el.addEventListener("input", blocker);
      el.__ieph = true;
    }
    el.setAttribute(key, value);
  }
}
function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }
  var cls = genClassForVnode(vnode);
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }
  if (cls !== el._prevClass) {
    el.setAttribute("class", cls);
    el._prevClass = cls;
  }
}
function normalizeEvents(on) {
  if (isDef(on[RANGE_TOKEN])) {
    var event = isIE ? "change" : "input";
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}
function createOnceHandler$1(event, handler, capture) {
  var _target = target$1;
  return function onceHandler() {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
}
function add$1(name, handler, capture, passive) {
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function(e) {
      if (e.target === e.currentTarget || e.timeStamp >= attachedTimestamp || e.timeStamp <= 0 || e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }
  target$1.addEventListener(name, handler, supportsPassive ? { capture, passive } : capture);
}
function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}
function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = void 0;
}
function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props2 = vnode.data.domProps || {};
  if (isDef(props2.__ob__)) {
    props2 = vnode.data.domProps = extend({}, props2);
  }
  for (key in oldProps) {
    if (!(key in props2)) {
      elm[key] = "";
    }
  }
  for (key in props2) {
    cur = props2[key];
    if (key === "textContent" || key === "innerHTML") {
      if (vnode.children) {
        vnode.children.length = 0;
      }
      if (cur === oldProps[key]) {
        continue;
      }
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }
    if (key === "value" && elm.tagName !== "PROGRESS") {
      elm._value = cur;
      var strCur = isUndef(cur) ? "" : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === "innerHTML" && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      svgContainer = svgContainer || document.createElement("div");
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (cur !== oldProps[key]) {
      try {
        elm[key] = cur;
      } catch (e) {
      }
    }
  }
}
function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === "OPTION" || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}
function isNotInFocusAndDirty(elm, checkVal) {
  var notInFocus = true;
  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {
  }
  return notInFocus && elm.value !== checkVal;
}
function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers;
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }
  return value !== newVal;
}
function normalizeStyleData(data) {
  var style2 = normalizeStyleBinding(data.style);
  return data.staticStyle ? extend(data.staticStyle, style2) : style2;
}
function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }
  if (typeof bindingStyle === "string") {
    return parseStyleText(bindingStyle);
  }
  return bindingStyle;
}
function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;
  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }
  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }
  var parentNode2 = vnode;
  while (parentNode2 = parentNode2.parent) {
    if (parentNode2.data && (styleData = normalizeStyleData(parentNode2.data))) {
      extend(res, styleData);
    }
  }
  return res;
}
function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }
  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style2 = normalizeStyleBinding(vnode.data.style) || {};
  vnode.data.normalizedStyle = isDef(style2.__ob__) ? extend({}, style2) : style2;
  var newStyle = getStyle(vnode, true);
  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, "");
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      setProp(el, name, cur == null ? "" : cur);
    }
  }
}
function addClass(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(" ") > -1) {
      cls.split(whitespaceRE).forEach(function(c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute("class") || "") + " ";
    if (cur.indexOf(" " + cls + " ") < 0) {
      el.setAttribute("class", (cur + cls).trim());
    }
  }
}
function removeClass(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(" ") > -1) {
      cls.split(whitespaceRE).forEach(function(c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute("class");
    }
  } else {
    var cur = " " + (el.getAttribute("class") || "") + " ";
    var tar = " " + cls + " ";
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, " ");
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute("class", cur);
    } else {
      el.removeAttribute("class");
    }
  }
}
function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  if (typeof def$$1 === "object") {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || "v"));
    }
    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === "string") {
    return autoCssTransition(def$$1);
  }
}
function nextFrame(fn) {
  raf(function() {
    raf(fn);
  });
}
function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}
function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}
function whenTransitionEnds(el, expectedType, cb) {
  var ref2 = getTransitionInfo(el, expectedType);
  var type = ref2.type;
  var timeout = ref2.timeout;
  var propCount = ref2.propCount;
  if (!type) {
    return cb();
  }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function() {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function() {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}
function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = (styles[transitionProp + "Delay"] || "").split(", ");
  var transitionDurations = (styles[transitionProp + "Duration"] || "").split(", ");
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + "Delay"] || "").split(", ");
  var animationDurations = (styles[animationProp + "Duration"] || "").split(", ");
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + "Property"]);
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max.apply(null, durations.map(function(d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function enter(vnode, toggleDisplay) {
  var el = vnode.elm;
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }
  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return;
  }
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }
  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter2 = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }
  var isAppear = !context._isMounted || !vnode.isRootInsert;
  if (isAppear && !appear && appear !== "") {
    return;
  }
  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === "function" ? appear : enter2 : enter2;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);
  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, "enter", vnode);
  }
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function() {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });
  if (!vnode.data.show) {
    mergeVNodeHook(vnode, "insert", function() {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function() {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }
  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }
  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}
function leave(vnode, rm) {
  var el = vnode.elm;
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }
  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  if (isDef(el._leaveCb)) {
    return;
  }
  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave2 = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave2);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);
  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, "leave", vnode);
  }
  var cb = el._leaveCb = once(function() {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });
  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }
  function performLeave() {
    if (cb.cancelled) {
      return;
    }
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function() {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave2 && leave2(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}
function checkDuration(val, name, vnode) {
  if (typeof val !== "number") {
    warn("<transition> explicit " + name + " duration is not a valid number - got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - the duration expression might be incorrect.", vnode.context);
  }
}
function isValidDuration(val) {
  return typeof val === "number" && !isNaN(val);
}
function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}
function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}
function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  if (isIE || isEdge) {
    setTimeout(function() {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}
function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn('<select multiple v-model="' + binding.expression + '"> expects an Array value for its binding, but got ' + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}
function hasNoMatchingOption(value, options) {
  return options.every(function(o) {
    return !looseEqual(o, value);
  });
}
function getValue(option) {
  return "_value" in option ? option._value : option.value;
}
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  if (!e.target.composing) {
    return;
  }
  e.target.composing = false;
  trigger(e.target, "input");
}
function trigger(el, type) {
  var e = document.createEvent("HTMLEvents");
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}
function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}
function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options;
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data;
}
function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h("keep-alive", {
      props: rawChild.componentOptions.propsData
    });
  }
}
function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}
function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}
function callPendingCbs(c) {
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}
function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}
function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = "0s";
  }
}
var emptyObject, _toString, isBuiltInTag, isReservedAttribute, hasOwnProperty, camelizeRE, camelize, capitalize, hyphenateRE, hyphenate, bind, no, identity, SSR_ATTR, ASSET_TYPES, LIFECYCLE_HOOKS, config, unicodeRegExp, bailRE, hasProto, inBrowser, inWeex, weexPlatform, UA, isIE, isIE9, isEdge, isAndroid, isIOS, isChrome, isPhantomJS, isFF, nativeWatch, supportsPassive, opts, _isServer, isServerRendering, devtools, hasSymbol, _Set, warn, tip, generateComponentTrace, formatComponentName, hasConsole, classifyRE, classify, repeat, uid, Dep, targetStack, VNode, prototypeAccessors, createEmptyVNode, arrayProto, arrayMethods, methodsToPatch, arrayKeys, shouldObserve, Observer, strats, defaultStrat, simpleCheckRE, functionTypeCheckRE, EXPLICABLE_TYPES, isUsingMicroTask, callbacks, pending, timerFunc, p, counter, observer, textNode, initProxy, allowedGlobals, warnNonPresent, warnReservedPrefix, hasProxy, isBuiltInModifier, hasHandler, getHandler, seenObjects, mark, measure, perf, normalizeEvent, componentVNodeHooks, hooksToMerge, SIMPLE_NORMALIZE, ALWAYS_NORMALIZE, currentRenderingInstance, target, activeInstance, isUpdatingChildComponent, MAX_UPDATE_COUNT, queue, activatedChildren, has, circular, waiting, flushing, index, currentFlushTimestamp, getNow, performance, uid$2, Watcher, sharedPropertyDefinition, computedWatcherOptions, uid$3, patternTypes, KeepAlive, builtInComponents, isReservedAttr, acceptValue, mustUseProp, isEnumeratedAttr, isValidContentEditableValue, convertEnumeratedValue, isBooleanAttr, xlinkNS, isXlink, getXlinkProp, isFalsyAttrValue, namespaceMap, isHTMLTag, isSVG, isReservedTag, unknownElementCache, isTextInputType, nodeOps, ref, emptyNode, hooks, directives, emptyModifiers, baseModules, attrs, klass, RANGE_TOKEN, CHECKBOX_RADIO_TOKEN, target$1, useMicrotaskFix, events, svgContainer, domProps, parseStyleText, cssVarRE, importantRE, setProp, vendorNames, emptyStyle, normalize, style, whitespaceRE, autoCssTransition, hasTransition, TRANSITION, ANIMATION, transitionProp, transitionEndEvent, animationProp, animationEndEvent, raf, transformRE, transition, platformModules, modules, patch, directive, show, platformDirectives, transitionProps, isNotTextNode, isVShowDirective, Transition, props, TransitionGroup, platformComponents, vue_runtime_esm_default;
var init_vue_runtime_esm = __esm({
  "node_modules/vue-file-agent/node_modules/vue/dist/vue.runtime.esm.js"() {
    emptyObject = Object.freeze({});
    _toString = Object.prototype.toString;
    isBuiltInTag = makeMap("slot,component", true);
    isReservedAttribute = makeMap("key,ref,slot,slot-scope,is");
    hasOwnProperty = Object.prototype.hasOwnProperty;
    camelizeRE = /-(\w)/g;
    camelize = cached(function(str) {
      return str.replace(camelizeRE, function(_, c) {
        return c ? c.toUpperCase() : "";
      });
    });
    capitalize = cached(function(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    });
    hyphenateRE = /\B([A-Z])/g;
    hyphenate = cached(function(str) {
      return str.replace(hyphenateRE, "-$1").toLowerCase();
    });
    bind = Function.prototype.bind ? nativeBind : polyfillBind;
    no = function(a, b, c) {
      return false;
    };
    identity = function(_) {
      return _;
    };
    SSR_ATTR = "data-server-rendered";
    ASSET_TYPES = [
      "component",
      "directive",
      "filter"
    ];
    LIFECYCLE_HOOKS = [
      "beforeCreate",
      "created",
      "beforeMount",
      "mounted",
      "beforeUpdate",
      "updated",
      "beforeDestroy",
      "destroyed",
      "activated",
      "deactivated",
      "errorCaptured",
      "serverPrefetch"
    ];
    config = {
      optionMergeStrategies: /* @__PURE__ */ Object.create(null),
      silent: false,
      productionTip: true,
      devtools: true,
      performance: false,
      errorHandler: null,
      warnHandler: null,
      ignoredElements: [],
      keyCodes: /* @__PURE__ */ Object.create(null),
      isReservedTag: no,
      isReservedAttr: no,
      isUnknownElement: no,
      getTagNamespace: noop,
      parsePlatformTagName: identity,
      mustUseProp: no,
      async: true,
      _lifecycleHooks: LIFECYCLE_HOOKS
    };
    unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
    bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");
    hasProto = "__proto__" in {};
    inBrowser = typeof window !== "undefined";
    inWeex = typeof WXEnvironment !== "undefined" && !!WXEnvironment.platform;
    weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
    UA = inBrowser && window.navigator.userAgent.toLowerCase();
    isIE = UA && /msie|trident/.test(UA);
    isIE9 = UA && UA.indexOf("msie 9.0") > 0;
    isEdge = UA && UA.indexOf("edge/") > 0;
    isAndroid = UA && UA.indexOf("android") > 0 || weexPlatform === "android";
    isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === "ios";
    isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
    isPhantomJS = UA && /phantomjs/.test(UA);
    isFF = UA && UA.match(/firefox\/(\d+)/);
    nativeWatch = {}.watch;
    supportsPassive = false;
    if (inBrowser) {
      try {
        opts = {};
        Object.defineProperty(opts, "passive", {
          get: function get3() {
            supportsPassive = true;
          }
        });
        window.addEventListener("test-passive", null, opts);
      } catch (e) {
      }
    }
    isServerRendering = function() {
      if (_isServer === void 0) {
        if (!inBrowser && !inWeex && typeof global !== "undefined") {
          _isServer = global["process"] && global["process"].env.VUE_ENV === "server";
        } else {
          _isServer = false;
        }
      }
      return _isServer;
    };
    devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
    hasSymbol = typeof Symbol !== "undefined" && isNative(Symbol) && typeof Reflect !== "undefined" && isNative(Reflect.ownKeys);
    if (typeof Set !== "undefined" && isNative(Set)) {
      _Set = Set;
    } else {
      _Set = function() {
        function Set2() {
          this.set = /* @__PURE__ */ Object.create(null);
        }
        Set2.prototype.has = function has2(key) {
          return this.set[key] === true;
        };
        Set2.prototype.add = function add2(key) {
          this.set[key] = true;
        };
        Set2.prototype.clear = function clear() {
          this.set = /* @__PURE__ */ Object.create(null);
        };
        return Set2;
      }();
    }
    warn = noop;
    tip = noop;
    generateComponentTrace = noop;
    formatComponentName = noop;
    if (true) {
      hasConsole = typeof console !== "undefined";
      classifyRE = /(?:^|[-_])(\w)/g;
      classify = function(str) {
        return str.replace(classifyRE, function(c) {
          return c.toUpperCase();
        }).replace(/[-_]/g, "");
      };
      warn = function(msg, vm) {
        var trace = vm ? generateComponentTrace(vm) : "";
        if (config.warnHandler) {
          config.warnHandler.call(null, msg, vm, trace);
        } else if (hasConsole && !config.silent) {
          console.error("[Vue warn]: " + msg + trace);
        }
      };
      tip = function(msg, vm) {
        if (hasConsole && !config.silent) {
          console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ""));
        }
      };
      formatComponentName = function(vm, includeFile) {
        if (vm.$root === vm) {
          return "<Root>";
        }
        var options = typeof vm === "function" && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
        var name = options.name || options._componentTag;
        var file = options.__file;
        if (!name && file) {
          var match = file.match(/([^/\\]+)\.vue$/);
          name = match && match[1];
        }
        return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : "");
      };
      repeat = function(str, n) {
        var res = "";
        while (n) {
          if (n % 2 === 1) {
            res += str;
          }
          if (n > 1) {
            str += str;
          }
          n >>= 1;
        }
        return res;
      };
      generateComponentTrace = function(vm) {
        if (vm._isVue && vm.$parent) {
          var tree = [];
          var currentRecursiveSequence = 0;
          while (vm) {
            if (tree.length > 0) {
              var last = tree[tree.length - 1];
              if (last.constructor === vm.constructor) {
                currentRecursiveSequence++;
                vm = vm.$parent;
                continue;
              } else if (currentRecursiveSequence > 0) {
                tree[tree.length - 1] = [last, currentRecursiveSequence];
                currentRecursiveSequence = 0;
              }
            }
            tree.push(vm);
            vm = vm.$parent;
          }
          return "\n\nfound in\n\n" + tree.map(function(vm2, i) {
            return "" + (i === 0 ? "---> " : repeat(" ", 5 + i * 2)) + (Array.isArray(vm2) ? formatComponentName(vm2[0]) + "... (" + vm2[1] + " recursive calls)" : formatComponentName(vm2));
          }).join("\n");
        } else {
          return "\n\n(found in " + formatComponentName(vm) + ")";
        }
      };
    }
    uid = 0;
    Dep = function Dep2() {
      this.id = uid++;
      this.subs = [];
    };
    Dep.prototype.addSub = function addSub(sub) {
      this.subs.push(sub);
    };
    Dep.prototype.removeSub = function removeSub(sub) {
      remove(this.subs, sub);
    };
    Dep.prototype.depend = function depend() {
      if (Dep.target) {
        Dep.target.addDep(this);
      }
    };
    Dep.prototype.notify = function notify() {
      var subs = this.subs.slice();
      if (!config.async) {
        subs.sort(function(a, b) {
          return a.id - b.id;
        });
      }
      for (var i = 0, l = subs.length; i < l; i++) {
        subs[i].update();
      }
    };
    Dep.target = null;
    targetStack = [];
    VNode = function VNode2(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
      this.tag = tag;
      this.data = data;
      this.children = children;
      this.text = text;
      this.elm = elm;
      this.ns = void 0;
      this.context = context;
      this.fnContext = void 0;
      this.fnOptions = void 0;
      this.fnScopeId = void 0;
      this.key = data && data.key;
      this.componentOptions = componentOptions;
      this.componentInstance = void 0;
      this.parent = void 0;
      this.raw = false;
      this.isStatic = false;
      this.isRootInsert = true;
      this.isComment = false;
      this.isCloned = false;
      this.isOnce = false;
      this.asyncFactory = asyncFactory;
      this.asyncMeta = void 0;
      this.isAsyncPlaceholder = false;
    };
    prototypeAccessors = { child: { configurable: true } };
    prototypeAccessors.child.get = function() {
      return this.componentInstance;
    };
    Object.defineProperties(VNode.prototype, prototypeAccessors);
    createEmptyVNode = function(text) {
      if (text === void 0)
        text = "";
      var node = new VNode();
      node.text = text;
      node.isComment = true;
      return node;
    };
    arrayProto = Array.prototype;
    arrayMethods = Object.create(arrayProto);
    methodsToPatch = [
      "push",
      "pop",
      "shift",
      "unshift",
      "splice",
      "sort",
      "reverse"
    ];
    methodsToPatch.forEach(function(method) {
      var original = arrayProto[method];
      def(arrayMethods, method, function mutator() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var result = original.apply(this, args);
        var ob = this.__ob__;
        var inserted2;
        switch (method) {
          case "push":
          case "unshift":
            inserted2 = args;
            break;
          case "splice":
            inserted2 = args.slice(2);
            break;
        }
        if (inserted2) {
          ob.observeArray(inserted2);
        }
        ob.dep.notify();
        return result;
      });
    });
    arrayKeys = Object.getOwnPropertyNames(arrayMethods);
    shouldObserve = true;
    Observer = function Observer2(value) {
      this.value = value;
      this.dep = new Dep();
      this.vmCount = 0;
      def(value, "__ob__", this);
      if (Array.isArray(value)) {
        if (hasProto) {
          protoAugment(value, arrayMethods);
        } else {
          copyAugment(value, arrayMethods, arrayKeys);
        }
        this.observeArray(value);
      } else {
        this.walk(value);
      }
    };
    Observer.prototype.walk = function walk(obj) {
      var keys = Object.keys(obj);
      for (var i = 0; i < keys.length; i++) {
        defineReactive$$1(obj, keys[i]);
      }
    };
    Observer.prototype.observeArray = function observeArray(items) {
      for (var i = 0, l = items.length; i < l; i++) {
        observe(items[i]);
      }
    };
    strats = config.optionMergeStrategies;
    if (true) {
      strats.el = strats.propsData = function(parent, child, vm, key) {
        if (!vm) {
          warn('option "' + key + '" can only be used during instance creation with the `new` keyword.');
        }
        return defaultStrat(parent, child);
      };
    }
    strats.data = function(parentVal, childVal, vm) {
      if (!vm) {
        if (childVal && typeof childVal !== "function") {
          warn('The "data" option should be a function that returns a per-instance value in component definitions.', vm);
          return parentVal;
        }
        return mergeDataOrFn(parentVal, childVal);
      }
      return mergeDataOrFn(parentVal, childVal, vm);
    };
    LIFECYCLE_HOOKS.forEach(function(hook) {
      strats[hook] = mergeHook;
    });
    ASSET_TYPES.forEach(function(type) {
      strats[type + "s"] = mergeAssets;
    });
    strats.watch = function(parentVal, childVal, vm, key) {
      if (parentVal === nativeWatch) {
        parentVal = void 0;
      }
      if (childVal === nativeWatch) {
        childVal = void 0;
      }
      if (!childVal) {
        return Object.create(parentVal || null);
      }
      if (true) {
        assertObjectType(key, childVal, vm);
      }
      if (!parentVal) {
        return childVal;
      }
      var ret = {};
      extend(ret, parentVal);
      for (var key$1 in childVal) {
        var parent = ret[key$1];
        var child = childVal[key$1];
        if (parent && !Array.isArray(parent)) {
          parent = [parent];
        }
        ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
      }
      return ret;
    };
    strats.props = strats.methods = strats.inject = strats.computed = function(parentVal, childVal, vm, key) {
      if (childVal && true) {
        assertObjectType(key, childVal, vm);
      }
      if (!parentVal) {
        return childVal;
      }
      var ret = /* @__PURE__ */ Object.create(null);
      extend(ret, parentVal);
      if (childVal) {
        extend(ret, childVal);
      }
      return ret;
    };
    strats.provide = mergeDataOrFn;
    defaultStrat = function(parentVal, childVal) {
      return childVal === void 0 ? parentVal : childVal;
    };
    simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;
    functionTypeCheckRE = /^\s*function (\w+)/;
    EXPLICABLE_TYPES = ["string", "number", "boolean"];
    isUsingMicroTask = false;
    callbacks = [];
    pending = false;
    if (typeof Promise !== "undefined" && isNative(Promise)) {
      p = Promise.resolve();
      timerFunc = function() {
        p.then(flushCallbacks);
        if (isIOS) {
          setTimeout(noop);
        }
      };
      isUsingMicroTask = true;
    } else if (!isIE && typeof MutationObserver !== "undefined" && (isNative(MutationObserver) || MutationObserver.toString() === "[object MutationObserverConstructor]")) {
      counter = 1;
      observer = new MutationObserver(flushCallbacks);
      textNode = document.createTextNode(String(counter));
      observer.observe(textNode, {
        characterData: true
      });
      timerFunc = function() {
        counter = (counter + 1) % 2;
        textNode.data = String(counter);
      };
      isUsingMicroTask = true;
    } else if (typeof setImmediate !== "undefined" && isNative(setImmediate)) {
      timerFunc = function() {
        setImmediate(flushCallbacks);
      };
    } else {
      timerFunc = function() {
        setTimeout(flushCallbacks, 0);
      };
    }
    if (true) {
      allowedGlobals = makeMap("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require");
      warnNonPresent = function(target2, key) {
        warn('Property or method "' + key + '" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target2);
      };
      warnReservedPrefix = function(target2, key) {
        warn('Property "' + key + '" must be accessed with "$data.' + key + '" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data', target2);
      };
      hasProxy = typeof Proxy !== "undefined" && isNative(Proxy);
      if (hasProxy) {
        isBuiltInModifier = makeMap("stop,prevent,self,ctrl,shift,alt,meta,exact");
        config.keyCodes = new Proxy(config.keyCodes, {
          set: function set2(target2, key, value) {
            if (isBuiltInModifier(key)) {
              warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
              return false;
            } else {
              target2[key] = value;
              return true;
            }
          }
        });
      }
      hasHandler = {
        has: function has2(target2, key) {
          var has3 = key in target2;
          var isAllowed = allowedGlobals(key) || typeof key === "string" && key.charAt(0) === "_" && !(key in target2.$data);
          if (!has3 && !isAllowed) {
            if (key in target2.$data) {
              warnReservedPrefix(target2, key);
            } else {
              warnNonPresent(target2, key);
            }
          }
          return has3 || !isAllowed;
        }
      };
      getHandler = {
        get: function get3(target2, key) {
          if (typeof key === "string" && !(key in target2)) {
            if (key in target2.$data) {
              warnReservedPrefix(target2, key);
            } else {
              warnNonPresent(target2, key);
            }
          }
          return target2[key];
        }
      };
      initProxy = function initProxy2(vm) {
        if (hasProxy) {
          var options = vm.$options;
          var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
          vm._renderProxy = new Proxy(vm, handlers);
        } else {
          vm._renderProxy = vm;
        }
      };
    }
    seenObjects = new _Set();
    if (true) {
      perf = inBrowser && window.performance;
      if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
        mark = function(tag) {
          return perf.mark(tag);
        };
        measure = function(name, startTag, endTag) {
          perf.measure(name, startTag, endTag);
          perf.clearMarks(startTag);
          perf.clearMarks(endTag);
        };
      }
    }
    normalizeEvent = cached(function(name) {
      var passive = name.charAt(0) === "&";
      name = passive ? name.slice(1) : name;
      var once$$1 = name.charAt(0) === "~";
      name = once$$1 ? name.slice(1) : name;
      var capture = name.charAt(0) === "!";
      name = capture ? name.slice(1) : name;
      return {
        name,
        once: once$$1,
        capture,
        passive
      };
    });
    installRenderHelpers(FunctionalRenderContext.prototype);
    componentVNodeHooks = {
      init: function init(vnode, hydrating) {
        if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
          var mountedNode = vnode;
          componentVNodeHooks.prepatch(mountedNode, mountedNode);
        } else {
          var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
          child.$mount(hydrating ? vnode.elm : void 0, hydrating);
        }
      },
      prepatch: function prepatch(oldVnode, vnode) {
        var options = vnode.componentOptions;
        var child = vnode.componentInstance = oldVnode.componentInstance;
        updateChildComponent(child, options.propsData, options.listeners, vnode, options.children);
      },
      insert: function insert(vnode) {
        var context = vnode.context;
        var componentInstance = vnode.componentInstance;
        if (!componentInstance._isMounted) {
          componentInstance._isMounted = true;
          callHook(componentInstance, "mounted");
        }
        if (vnode.data.keepAlive) {
          if (context._isMounted) {
            queueActivatedComponent(componentInstance);
          } else {
            activateChildComponent(componentInstance, true);
          }
        }
      },
      destroy: function destroy(vnode) {
        var componentInstance = vnode.componentInstance;
        if (!componentInstance._isDestroyed) {
          if (!vnode.data.keepAlive) {
            componentInstance.$destroy();
          } else {
            deactivateChildComponent(componentInstance, true);
          }
        }
      }
    };
    hooksToMerge = Object.keys(componentVNodeHooks);
    SIMPLE_NORMALIZE = 1;
    ALWAYS_NORMALIZE = 2;
    currentRenderingInstance = null;
    activeInstance = null;
    isUpdatingChildComponent = false;
    MAX_UPDATE_COUNT = 100;
    queue = [];
    activatedChildren = [];
    has = {};
    circular = {};
    waiting = false;
    flushing = false;
    index = 0;
    currentFlushTimestamp = 0;
    getNow = Date.now;
    if (inBrowser && !isIE) {
      performance = window.performance;
      if (performance && typeof performance.now === "function" && getNow() > document.createEvent("Event").timeStamp) {
        getNow = function() {
          return performance.now();
        };
      }
    }
    uid$2 = 0;
    Watcher = function Watcher2(vm, expOrFn, cb, options, isRenderWatcher) {
      this.vm = vm;
      if (isRenderWatcher) {
        vm._watcher = this;
      }
      vm._watchers.push(this);
      if (options) {
        this.deep = !!options.deep;
        this.user = !!options.user;
        this.lazy = !!options.lazy;
        this.sync = !!options.sync;
        this.before = options.before;
      } else {
        this.deep = this.user = this.lazy = this.sync = false;
      }
      this.cb = cb;
      this.id = ++uid$2;
      this.active = true;
      this.dirty = this.lazy;
      this.deps = [];
      this.newDeps = [];
      this.depIds = new _Set();
      this.newDepIds = new _Set();
      this.expression = true ? expOrFn.toString() : "";
      if (typeof expOrFn === "function") {
        this.getter = expOrFn;
      } else {
        this.getter = parsePath(expOrFn);
        if (!this.getter) {
          this.getter = noop;
          warn('Failed watching path: "' + expOrFn + '" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.', vm);
        }
      }
      this.value = this.lazy ? void 0 : this.get();
    };
    Watcher.prototype.get = function get() {
      pushTarget(this);
      var value;
      var vm = this.vm;
      try {
        value = this.getter.call(vm, vm);
      } catch (e) {
        if (this.user) {
          handleError(e, vm, 'getter for watcher "' + this.expression + '"');
        } else {
          throw e;
        }
      } finally {
        if (this.deep) {
          traverse(value);
        }
        popTarget();
        this.cleanupDeps();
      }
      return value;
    };
    Watcher.prototype.addDep = function addDep(dep) {
      var id = dep.id;
      if (!this.newDepIds.has(id)) {
        this.newDepIds.add(id);
        this.newDeps.push(dep);
        if (!this.depIds.has(id)) {
          dep.addSub(this);
        }
      }
    };
    Watcher.prototype.cleanupDeps = function cleanupDeps() {
      var i = this.deps.length;
      while (i--) {
        var dep = this.deps[i];
        if (!this.newDepIds.has(dep.id)) {
          dep.removeSub(this);
        }
      }
      var tmp = this.depIds;
      this.depIds = this.newDepIds;
      this.newDepIds = tmp;
      this.newDepIds.clear();
      tmp = this.deps;
      this.deps = this.newDeps;
      this.newDeps = tmp;
      this.newDeps.length = 0;
    };
    Watcher.prototype.update = function update() {
      if (this.lazy) {
        this.dirty = true;
      } else if (this.sync) {
        this.run();
      } else {
        queueWatcher(this);
      }
    };
    Watcher.prototype.run = function run() {
      if (this.active) {
        var value = this.get();
        if (value !== this.value || isObject(value) || this.deep) {
          var oldValue = this.value;
          this.value = value;
          if (this.user) {
            var info = 'callback for watcher "' + this.expression + '"';
            invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
          } else {
            this.cb.call(this.vm, value, oldValue);
          }
        }
      }
    };
    Watcher.prototype.evaluate = function evaluate() {
      this.value = this.get();
      this.dirty = false;
    };
    Watcher.prototype.depend = function depend2() {
      var i = this.deps.length;
      while (i--) {
        this.deps[i].depend();
      }
    };
    Watcher.prototype.teardown = function teardown() {
      if (this.active) {
        if (!this.vm._isBeingDestroyed) {
          remove(this.vm._watchers, this);
        }
        var i = this.deps.length;
        while (i--) {
          this.deps[i].removeSub(this);
        }
        this.active = false;
      }
    };
    sharedPropertyDefinition = {
      enumerable: true,
      configurable: true,
      get: noop,
      set: noop
    };
    computedWatcherOptions = { lazy: true };
    uid$3 = 0;
    initMixin(Vue);
    stateMixin(Vue);
    eventsMixin(Vue);
    lifecycleMixin(Vue);
    renderMixin(Vue);
    patternTypes = [String, RegExp, Array];
    KeepAlive = {
      name: "keep-alive",
      abstract: true,
      props: {
        include: patternTypes,
        exclude: patternTypes,
        max: [String, Number]
      },
      methods: {
        cacheVNode: function cacheVNode() {
          var ref2 = this;
          var cache = ref2.cache;
          var keys = ref2.keys;
          var vnodeToCache = ref2.vnodeToCache;
          var keyToCache = ref2.keyToCache;
          if (vnodeToCache) {
            var tag = vnodeToCache.tag;
            var componentInstance = vnodeToCache.componentInstance;
            var componentOptions = vnodeToCache.componentOptions;
            cache[keyToCache] = {
              name: getComponentName(componentOptions),
              tag,
              componentInstance
            };
            keys.push(keyToCache);
            if (this.max && keys.length > parseInt(this.max)) {
              pruneCacheEntry(cache, keys[0], keys, this._vnode);
            }
            this.vnodeToCache = null;
          }
        }
      },
      created: function created() {
        this.cache = /* @__PURE__ */ Object.create(null);
        this.keys = [];
      },
      destroyed: function destroyed() {
        for (var key in this.cache) {
          pruneCacheEntry(this.cache, key, this.keys);
        }
      },
      mounted: function mounted() {
        var this$1 = this;
        this.cacheVNode();
        this.$watch("include", function(val) {
          pruneCache(this$1, function(name) {
            return matches(val, name);
          });
        });
        this.$watch("exclude", function(val) {
          pruneCache(this$1, function(name) {
            return !matches(val, name);
          });
        });
      },
      updated: function updated() {
        this.cacheVNode();
      },
      render: function render() {
        var slot = this.$slots.default;
        var vnode = getFirstComponentChild(slot);
        var componentOptions = vnode && vnode.componentOptions;
        if (componentOptions) {
          var name = getComponentName(componentOptions);
          var ref2 = this;
          var include = ref2.include;
          var exclude = ref2.exclude;
          if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
            return vnode;
          }
          var ref$1 = this;
          var cache = ref$1.cache;
          var keys = ref$1.keys;
          var key = vnode.key == null ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : "") : vnode.key;
          if (cache[key]) {
            vnode.componentInstance = cache[key].componentInstance;
            remove(keys, key);
            keys.push(key);
          } else {
            this.vnodeToCache = vnode;
            this.keyToCache = key;
          }
          vnode.data.keepAlive = true;
        }
        return vnode || slot && slot[0];
      }
    };
    builtInComponents = {
      KeepAlive
    };
    initGlobalAPI(Vue);
    Object.defineProperty(Vue.prototype, "$isServer", {
      get: isServerRendering
    });
    Object.defineProperty(Vue.prototype, "$ssrContext", {
      get: function get2() {
        return this.$vnode && this.$vnode.ssrContext;
      }
    });
    Object.defineProperty(Vue, "FunctionalRenderContext", {
      value: FunctionalRenderContext
    });
    Vue.version = "2.6.14";
    isReservedAttr = makeMap("style,class");
    acceptValue = makeMap("input,textarea,option,select,progress");
    mustUseProp = function(tag, type, attr) {
      return attr === "value" && acceptValue(tag) && type !== "button" || attr === "selected" && tag === "option" || attr === "checked" && tag === "input" || attr === "muted" && tag === "video";
    };
    isEnumeratedAttr = makeMap("contenteditable,draggable,spellcheck");
    isValidContentEditableValue = makeMap("events,caret,typing,plaintext-only");
    convertEnumeratedValue = function(key, value) {
      return isFalsyAttrValue(value) || value === "false" ? "false" : key === "contenteditable" && isValidContentEditableValue(value) ? value : "true";
    };
    isBooleanAttr = makeMap("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible");
    xlinkNS = "http://www.w3.org/1999/xlink";
    isXlink = function(name) {
      return name.charAt(5) === ":" && name.slice(0, 5) === "xlink";
    };
    getXlinkProp = function(name) {
      return isXlink(name) ? name.slice(6, name.length) : "";
    };
    isFalsyAttrValue = function(val) {
      return val == null || val === false;
    };
    namespaceMap = {
      svg: "http://www.w3.org/2000/svg",
      math: "http://www.w3.org/1998/Math/MathML"
    };
    isHTMLTag = makeMap("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot");
    isSVG = makeMap("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view", true);
    isReservedTag = function(tag) {
      return isHTMLTag(tag) || isSVG(tag);
    };
    unknownElementCache = /* @__PURE__ */ Object.create(null);
    isTextInputType = makeMap("text,number,password,search,email,tel,url");
    nodeOps = Object.freeze({
      createElement: createElement$1,
      createElementNS,
      createTextNode,
      createComment,
      insertBefore,
      removeChild,
      appendChild,
      parentNode,
      nextSibling,
      tagName,
      setTextContent,
      setStyleScope
    });
    ref = {
      create: function create(_, vnode) {
        registerRef(vnode);
      },
      update: function update2(oldVnode, vnode) {
        if (oldVnode.data.ref !== vnode.data.ref) {
          registerRef(oldVnode, true);
          registerRef(vnode);
        }
      },
      destroy: function destroy2(vnode) {
        registerRef(vnode, true);
      }
    };
    emptyNode = new VNode("", {}, []);
    hooks = ["create", "activate", "update", "remove", "destroy"];
    directives = {
      create: updateDirectives,
      update: updateDirectives,
      destroy: function unbindDirectives(vnode) {
        updateDirectives(vnode, emptyNode);
      }
    };
    emptyModifiers = /* @__PURE__ */ Object.create(null);
    baseModules = [
      ref,
      directives
    ];
    attrs = {
      create: updateAttrs,
      update: updateAttrs
    };
    klass = {
      create: updateClass,
      update: updateClass
    };
    RANGE_TOKEN = "__r";
    CHECKBOX_RADIO_TOKEN = "__c";
    useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
    events = {
      create: updateDOMListeners,
      update: updateDOMListeners
    };
    domProps = {
      create: updateDOMProps,
      update: updateDOMProps
    };
    parseStyleText = cached(function(cssText) {
      var res = {};
      var listDelimiter = /;(?![^(]*\))/g;
      var propertyDelimiter = /:(.+)/;
      cssText.split(listDelimiter).forEach(function(item) {
        if (item) {
          var tmp = item.split(propertyDelimiter);
          tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
        }
      });
      return res;
    });
    cssVarRE = /^--/;
    importantRE = /\s*!important$/;
    setProp = function(el, name, val) {
      if (cssVarRE.test(name)) {
        el.style.setProperty(name, val);
      } else if (importantRE.test(val)) {
        el.style.setProperty(hyphenate(name), val.replace(importantRE, ""), "important");
      } else {
        var normalizedName = normalize(name);
        if (Array.isArray(val)) {
          for (var i = 0, len = val.length; i < len; i++) {
            el.style[normalizedName] = val[i];
          }
        } else {
          el.style[normalizedName] = val;
        }
      }
    };
    vendorNames = ["Webkit", "Moz", "ms"];
    normalize = cached(function(prop) {
      emptyStyle = emptyStyle || document.createElement("div").style;
      prop = camelize(prop);
      if (prop !== "filter" && prop in emptyStyle) {
        return prop;
      }
      var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
      for (var i = 0; i < vendorNames.length; i++) {
        var name = vendorNames[i] + capName;
        if (name in emptyStyle) {
          return name;
        }
      }
    });
    style = {
      create: updateStyle,
      update: updateStyle
    };
    whitespaceRE = /\s+/;
    autoCssTransition = cached(function(name) {
      return {
        enterClass: name + "-enter",
        enterToClass: name + "-enter-to",
        enterActiveClass: name + "-enter-active",
        leaveClass: name + "-leave",
        leaveToClass: name + "-leave-to",
        leaveActiveClass: name + "-leave-active"
      };
    });
    hasTransition = inBrowser && !isIE9;
    TRANSITION = "transition";
    ANIMATION = "animation";
    transitionProp = "transition";
    transitionEndEvent = "transitionend";
    animationProp = "animation";
    animationEndEvent = "animationend";
    if (hasTransition) {
      if (window.ontransitionend === void 0 && window.onwebkittransitionend !== void 0) {
        transitionProp = "WebkitTransition";
        transitionEndEvent = "webkitTransitionEnd";
      }
      if (window.onanimationend === void 0 && window.onwebkitanimationend !== void 0) {
        animationProp = "WebkitAnimation";
        animationEndEvent = "webkitAnimationEnd";
      }
    }
    raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : function(fn) {
      return fn();
    };
    transformRE = /\b(transform|all)(,|$)/;
    transition = inBrowser ? {
      create: _enter,
      activate: _enter,
      remove: function remove$$1(vnode, rm) {
        if (vnode.data.show !== true) {
          leave(vnode, rm);
        } else {
          rm();
        }
      }
    } : {};
    platformModules = [
      attrs,
      klass,
      events,
      domProps,
      style,
      transition
    ];
    modules = platformModules.concat(baseModules);
    patch = createPatchFunction({ nodeOps, modules });
    if (isIE9) {
      document.addEventListener("selectionchange", function() {
        var el = document.activeElement;
        if (el && el.vmodel) {
          trigger(el, "input");
        }
      });
    }
    directive = {
      inserted: function inserted(el, binding, vnode, oldVnode) {
        if (vnode.tag === "select") {
          if (oldVnode.elm && !oldVnode.elm._vOptions) {
            mergeVNodeHook(vnode, "postpatch", function() {
              directive.componentUpdated(el, binding, vnode);
            });
          } else {
            setSelected(el, binding, vnode.context);
          }
          el._vOptions = [].map.call(el.options, getValue);
        } else if (vnode.tag === "textarea" || isTextInputType(el.type)) {
          el._vModifiers = binding.modifiers;
          if (!binding.modifiers.lazy) {
            el.addEventListener("compositionstart", onCompositionStart);
            el.addEventListener("compositionend", onCompositionEnd);
            el.addEventListener("change", onCompositionEnd);
            if (isIE9) {
              el.vmodel = true;
            }
          }
        }
      },
      componentUpdated: function componentUpdated(el, binding, vnode) {
        if (vnode.tag === "select") {
          setSelected(el, binding, vnode.context);
          var prevOptions = el._vOptions;
          var curOptions = el._vOptions = [].map.call(el.options, getValue);
          if (curOptions.some(function(o, i) {
            return !looseEqual(o, prevOptions[i]);
          })) {
            var needReset = el.multiple ? binding.value.some(function(v) {
              return hasNoMatchingOption(v, curOptions);
            }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
            if (needReset) {
              trigger(el, "change");
            }
          }
        }
      }
    };
    show = {
      bind: function bind2(el, ref2, vnode) {
        var value = ref2.value;
        vnode = locateNode(vnode);
        var transition$$1 = vnode.data && vnode.data.transition;
        var originalDisplay = el.__vOriginalDisplay = el.style.display === "none" ? "" : el.style.display;
        if (value && transition$$1) {
          vnode.data.show = true;
          enter(vnode, function() {
            el.style.display = originalDisplay;
          });
        } else {
          el.style.display = value ? originalDisplay : "none";
        }
      },
      update: function update3(el, ref2, vnode) {
        var value = ref2.value;
        var oldValue = ref2.oldValue;
        if (!value === !oldValue) {
          return;
        }
        vnode = locateNode(vnode);
        var transition$$1 = vnode.data && vnode.data.transition;
        if (transition$$1) {
          vnode.data.show = true;
          if (value) {
            enter(vnode, function() {
              el.style.display = el.__vOriginalDisplay;
            });
          } else {
            leave(vnode, function() {
              el.style.display = "none";
            });
          }
        } else {
          el.style.display = value ? el.__vOriginalDisplay : "none";
        }
      },
      unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
        if (!isDestroy) {
          el.style.display = el.__vOriginalDisplay;
        }
      }
    };
    platformDirectives = {
      model: directive,
      show
    };
    transitionProps = {
      name: String,
      appear: Boolean,
      css: Boolean,
      mode: String,
      type: String,
      enterClass: String,
      leaveClass: String,
      enterToClass: String,
      leaveToClass: String,
      enterActiveClass: String,
      leaveActiveClass: String,
      appearClass: String,
      appearActiveClass: String,
      appearToClass: String,
      duration: [Number, String, Object]
    };
    isNotTextNode = function(c) {
      return c.tag || isAsyncPlaceholder(c);
    };
    isVShowDirective = function(d) {
      return d.name === "show";
    };
    Transition = {
      name: "transition",
      props: transitionProps,
      abstract: true,
      render: function render2(h) {
        var this$1 = this;
        var children = this.$slots.default;
        if (!children) {
          return;
        }
        children = children.filter(isNotTextNode);
        if (!children.length) {
          return;
        }
        if (children.length > 1) {
          warn("<transition> can only be used on a single element. Use <transition-group> for lists.", this.$parent);
        }
        var mode = this.mode;
        if (mode && mode !== "in-out" && mode !== "out-in") {
          warn("invalid <transition> mode: " + mode, this.$parent);
        }
        var rawChild = children[0];
        if (hasParentTransition(this.$vnode)) {
          return rawChild;
        }
        var child = getRealChild(rawChild);
        if (!child) {
          return rawChild;
        }
        if (this._leaving) {
          return placeholder(h, rawChild);
        }
        var id = "__transition-" + this._uid + "-";
        child.key = child.key == null ? child.isComment ? id + "comment" : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
        var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
        var oldRawChild = this._vnode;
        var oldChild = getRealChild(oldRawChild);
        if (child.data.directives && child.data.directives.some(isVShowDirective)) {
          child.data.show = true;
        }
        if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
          var oldData = oldChild.data.transition = extend({}, data);
          if (mode === "out-in") {
            this._leaving = true;
            mergeVNodeHook(oldData, "afterLeave", function() {
              this$1._leaving = false;
              this$1.$forceUpdate();
            });
            return placeholder(h, rawChild);
          } else if (mode === "in-out") {
            if (isAsyncPlaceholder(child)) {
              return oldRawChild;
            }
            var delayedLeave;
            var performLeave = function() {
              delayedLeave();
            };
            mergeVNodeHook(data, "afterEnter", performLeave);
            mergeVNodeHook(data, "enterCancelled", performLeave);
            mergeVNodeHook(oldData, "delayLeave", function(leave2) {
              delayedLeave = leave2;
            });
          }
        }
        return rawChild;
      }
    };
    props = extend({
      tag: String,
      moveClass: String
    }, transitionProps);
    delete props.mode;
    TransitionGroup = {
      props,
      beforeMount: function beforeMount() {
        var this$1 = this;
        var update4 = this._update;
        this._update = function(vnode, hydrating) {
          var restoreActiveInstance = setActiveInstance(this$1);
          this$1.__patch__(this$1._vnode, this$1.kept, false, true);
          this$1._vnode = this$1.kept;
          restoreActiveInstance();
          update4.call(this$1, vnode, hydrating);
        };
      },
      render: function render3(h) {
        var tag = this.tag || this.$vnode.data.tag || "span";
        var map = /* @__PURE__ */ Object.create(null);
        var prevChildren = this.prevChildren = this.children;
        var rawChildren = this.$slots.default || [];
        var children = this.children = [];
        var transitionData = extractTransitionData(this);
        for (var i = 0; i < rawChildren.length; i++) {
          var c = rawChildren[i];
          if (c.tag) {
            if (c.key != null && String(c.key).indexOf("__vlist") !== 0) {
              children.push(c);
              map[c.key] = c;
              (c.data || (c.data = {})).transition = transitionData;
            } else if (true) {
              var opts = c.componentOptions;
              var name = opts ? opts.Ctor.options.name || opts.tag || "" : c.tag;
              warn("<transition-group> children must be keyed: <" + name + ">");
            }
          }
        }
        if (prevChildren) {
          var kept = [];
          var removed = [];
          for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
            var c$1 = prevChildren[i$1];
            c$1.data.transition = transitionData;
            c$1.data.pos = c$1.elm.getBoundingClientRect();
            if (map[c$1.key]) {
              kept.push(c$1);
            } else {
              removed.push(c$1);
            }
          }
          this.kept = h(tag, null, kept);
          this.removed = removed;
        }
        return h(tag, null, children);
      },
      updated: function updated2() {
        var children = this.prevChildren;
        var moveClass = this.moveClass || (this.name || "v") + "-move";
        if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
          return;
        }
        children.forEach(callPendingCbs);
        children.forEach(recordPosition);
        children.forEach(applyTranslation);
        this._reflow = document.body.offsetHeight;
        children.forEach(function(c) {
          if (c.data.moved) {
            var el = c.elm;
            var s = el.style;
            addTransitionClass(el, moveClass);
            s.transform = s.WebkitTransform = s.transitionDuration = "";
            el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
              if (e && e.target !== el) {
                return;
              }
              if (!e || /transform$/.test(e.propertyName)) {
                el.removeEventListener(transitionEndEvent, cb);
                el._moveCb = null;
                removeTransitionClass(el, moveClass);
              }
            });
          }
        });
      },
      methods: {
        hasMove: function hasMove(el, moveClass) {
          if (!hasTransition) {
            return false;
          }
          if (this._hasMove) {
            return this._hasMove;
          }
          var clone = el.cloneNode();
          if (el._transitionClasses) {
            el._transitionClasses.forEach(function(cls) {
              removeClass(clone, cls);
            });
          }
          addClass(clone, moveClass);
          clone.style.display = "none";
          this.$el.appendChild(clone);
          var info = getTransitionInfo(clone);
          this.$el.removeChild(clone);
          return this._hasMove = info.hasTransform;
        }
      }
    };
    platformComponents = {
      Transition,
      TransitionGroup
    };
    Vue.config.mustUseProp = mustUseProp;
    Vue.config.isReservedTag = isReservedTag;
    Vue.config.isReservedAttr = isReservedAttr;
    Vue.config.getTagNamespace = getTagNamespace;
    Vue.config.isUnknownElement = isUnknownElement;
    extend(Vue.options.directives, platformDirectives);
    extend(Vue.options.components, platformComponents);
    Vue.prototype.__patch__ = inBrowser ? patch : noop;
    Vue.prototype.$mount = function(el, hydrating) {
      el = el && inBrowser ? query(el) : void 0;
      return mountComponent(this, el, hydrating);
    };
    if (inBrowser) {
      setTimeout(function() {
        if (config.devtools) {
          if (devtools) {
            devtools.emit("init", Vue);
          } else if (true) {
            console[console.info ? "info" : "log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools");
          }
        }
        if (config.productionTip !== false && typeof console !== "undefined") {
          console[console.info ? "info" : "log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html");
        }
      }, 0);
    }
    vue_runtime_esm_default = Vue;
  }
});

// node_modules/vue-file-agent/dist/vue-file-agent.umd.js
var require_vue_file_agent_umd = __commonJS({
  "node_modules/vue-file-agent/dist/vue-file-agent.umd.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory((init_vue_runtime_esm(), __toCommonJS(vue_runtime_esm_exports)));
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["vue-file-agent"] = factory((init_vue_runtime_esm(), __toCommonJS(vue_runtime_esm_exports)));
      else
        root["vue-file-agent"] = factory(root["Vue"]);
    })(typeof self !== "undefined" ? self : exports, function(__WEBPACK_EXTERNAL_MODULE__8bbf__) {
      return function(modules2) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules2;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function(exports2, name, getter) {
          if (!__webpack_require__.o(exports2, name)) {
            Object.defineProperty(exports2, name, { enumerable: true, get: getter });
          }
        };
        __webpack_require__.r = function(exports2) {
          if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
          }
          Object.defineProperty(exports2, "__esModule", { value: true });
        };
        __webpack_require__.t = function(value, mode) {
          if (mode & 1)
            value = __webpack_require__(value);
          if (mode & 8)
            return value;
          if (mode & 4 && typeof value === "object" && value && value.__esModule)
            return value;
          var ns = /* @__PURE__ */ Object.create(null);
          __webpack_require__.r(ns);
          Object.defineProperty(ns, "default", { enumerable: true, value });
          if (mode & 2 && typeof value != "string")
            for (var key in value)
              __webpack_require__.d(ns, key, function(key2) {
                return value[key2];
              }.bind(null, key));
          return ns;
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function getDefault() {
            return module2["default"];
          } : function getModuleExports() {
            return module2;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = "fb15");
      }({
        "6816": function(module2, __webpack_exports__, __webpack_require__) {
          "use strict";
          var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_vue_file_agent_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("eb77");
          var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_vue_file_agent_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_vue_file_agent_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
          var _unused_webpack_default_export = _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_vue_file_agent_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a;
        },
        "8875": function(module2, exports2, __webpack_require__) {
          var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
          (function(root, factory) {
            if (true) {
              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else {
            }
          })(typeof self !== "undefined" ? self : this, function() {
            function getCurrentScript() {
              if (document.currentScript) {
                return document.currentScript;
              }
              try {
                throw new Error();
              } catch (err) {
                var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/ig, ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/ig, stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack), scriptLocation = stackDetails && stackDetails[1] || false, line = stackDetails && stackDetails[2] || false, currentLocation = document.location.href.replace(document.location.hash, ""), pageSource, inlineScriptSourceRegExp, inlineScriptSource, scripts = document.getElementsByTagName("script");
                if (scriptLocation === currentLocation) {
                  pageSource = document.documentElement.outerHTML;
                  inlineScriptSourceRegExp = new RegExp("(?:[^\\n]+?\\n){0," + (line - 2) + "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*", "i");
                  inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, "$1").trim();
                }
                for (var i = 0; i < scripts.length; i++) {
                  if (scripts[i].readyState === "interactive") {
                    return scripts[i];
                  }
                  if (scripts[i].src === scriptLocation) {
                    return scripts[i];
                  }
                  if (scriptLocation === currentLocation && scripts[i].innerHTML && scripts[i].innerHTML.trim() === inlineScriptSource) {
                    return scripts[i];
                  }
                }
                return null;
              }
            }
            ;
            return getCurrentScript;
          });
        },
        "8bbf": function(module2, exports2) {
          module2.exports = __WEBPACK_EXTERNAL_MODULE__8bbf__;
        },
        "eb77": function(module2, exports2, __webpack_require__) {
        },
        "fb15": function(module2, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.r(__webpack_exports__);
          __webpack_require__.d(__webpack_exports__, "VueFileAgentPlugin", function() {
            return src_VueFileAgentPlugin;
          });
          __webpack_require__.d(__webpack_exports__, "mixin", function() {
            return mixin;
          });
          __webpack_require__.d(__webpack_exports__, "VueFileAgentMixin", function() {
            return vue_file_agent_mixin;
          });
          __webpack_require__.d(__webpack_exports__, "VueFilePreviewMixin", function() {
            return vue_file_preview_mixin;
          });
          __webpack_require__.d(__webpack_exports__, "utils", function() {
            return utils;
          });
          __webpack_require__.d(__webpack_exports__, "FileRecord", function() {
            return file_record;
          });
          __webpack_require__.d(__webpack_exports__, "plugins", function() {
            return plugins;
          });
          __webpack_require__.d(__webpack_exports__, "FileData", function() {
            return FileData;
          });
          if (typeof window !== "undefined") {
            var currentScript = window.document.currentScript;
            if (true) {
              var getCurrentScript = __webpack_require__("8875");
              currentScript = getCurrentScript();
              if (!("currentScript" in document)) {
                Object.defineProperty(document, "currentScript", { get: getCurrentScript });
              }
            }
            var src = currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
            if (src) {
              __webpack_require__.p = src[1];
            }
          }
          var setPublicPath = null;
          var render4 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("svg", { attrs: { "viewBox": _vm.viewBoxComputed } }, [_vm._l(_vm.icon.paths, function(d, index2) {
              return [d ? _c("path", { key: index2, attrs: { "d": d } }) : _vm._e()];
            })], 2);
          };
          var staticRenderFns = [];
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          function __extends(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          }
          var __assign = function() {
            __assign = Object.assign || function __assign2(t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          function __rest(s, e) {
            var t = {};
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
            if (s != null && typeof Object.getOwnPropertySymbols === "function")
              for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
              }
            return t;
          }
          function __decorate(decorators, target2, key, desc) {
            var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key) : desc, d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
              r = Reflect.decorate(decorators, target2, key, desc);
            else
              for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target2, key, r) : d(target2, key)) || r;
            return c > 3 && r && Object.defineProperty(target2, key, r), r;
          }
          function __param(paramIndex, decorator) {
            return function(target2, key) {
              decorator(target2, key, paramIndex);
            };
          }
          function __metadata(metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
              return Reflect.metadata(metadataKey, metadataValue);
          }
          function __awaiter(thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function(resolve) {
                resolve(value);
              });
            }
            return new (P || (P = Promise))(function(resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }
              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          }
          function __generator(thisArg, body) {
            var _ = { label: 0, sent: function() {
              if (t[0] & 1)
                throw t[1];
              return t[1];
            }, trys: [], ops: [] }, f, y, t, g;
            return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
              return this;
            }), g;
            function verb(n) {
              return function(v) {
                return step([n, v]);
              };
            }
            function step(op) {
              if (f)
                throw new TypeError("Generator is already executing.");
              while (_)
                try {
                  if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                    return t;
                  if (y = 0, t)
                    op = [op[0] & 2, t.value];
                  switch (op[0]) {
                    case 0:
                    case 1:
                      t = op;
                      break;
                    case 4:
                      _.label++;
                      return { value: op[1], done: false };
                    case 5:
                      _.label++;
                      y = op[1];
                      op = [0];
                      continue;
                    case 7:
                      op = _.ops.pop();
                      _.trys.pop();
                      continue;
                    default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                      }
                      if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                      }
                      if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                      }
                      if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                      }
                      if (t[2])
                        _.ops.pop();
                      _.trys.pop();
                      continue;
                  }
                  op = body.call(thisArg, _);
                } catch (e) {
                  op = [6, e];
                  y = 0;
                } finally {
                  f = t = 0;
                }
              if (op[0] & 5)
                throw op[1];
              return { value: op[0] ? op[1] : void 0, done: true };
            }
          }
          function __exportStar(m, exports2) {
            for (var p in m)
              if (!exports2.hasOwnProperty(p))
                exports2[p] = m[p];
          }
          function __values(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m)
              return m.call(o);
            if (o && typeof o.length === "number")
              return {
                next: function() {
                  if (o && i >= o.length)
                    o = void 0;
                  return { value: o && o[i++], done: !o };
                }
              };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }
          function __read(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m)
              return o;
            var i = m.call(o), r, ar = [], e;
            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
            } catch (error) {
              e = { error };
            } finally {
              try {
                if (r && !r.done && (m = i["return"]))
                  m.call(i);
              } finally {
                if (e)
                  throw e.error;
              }
            }
            return ar;
          }
          function __spread() {
            for (var ar = [], i = 0; i < arguments.length; i++)
              ar = ar.concat(__read(arguments[i]));
            return ar;
          }
          function __spreadArrays() {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++)
              s += arguments[i].length;
            for (var r = Array(s), k = 0, i = 0; i < il; i++)
              for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
            return r;
          }
          ;
          function __await(v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          }
          function __asyncGenerator(thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator)
              throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []), i, q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
              return this;
            }, i;
            function verb(n) {
              if (g[n])
                i[n] = function(v) {
                  return new Promise(function(a, b) {
                    q.push([n, v, a, b]) > 1 || resume(n, v);
                  });
                };
            }
            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }
            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }
            function fulfill(value) {
              resume("next", value);
            }
            function reject(value) {
              resume("throw", value);
            }
            function settle(f, v) {
              if (f(v), q.shift(), q.length)
                resume(q[0][0], q[0][1]);
            }
          }
          function __asyncDelegator(o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function(e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function() {
              return this;
            }, i;
            function verb(n, f) {
              i[n] = o[n] ? function(v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
              } : f;
            }
          }
          function __asyncValues(o) {
            if (!Symbol.asyncIterator)
              throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator], i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
              return this;
            }, i);
            function verb(n) {
              i[n] = o[n] && function(v) {
                return new Promise(function(resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }
            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function(v2) {
                resolve({ value: v2, done: d });
              }, reject);
            }
          }
          function __makeTemplateObject(cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", { value: raw });
            } else {
              cooked.raw = raw;
            }
            return cooked;
          }
          ;
          function __importStar(mod) {
            if (mod && mod.__esModule)
              return mod;
            var result = {};
            if (mod != null) {
              for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                  result[k] = mod[k];
            }
            result.default = mod;
            return result;
          }
          function __importDefault(mod) {
            return mod && mod.__esModule ? mod : { default: mod };
          }
          function __classPrivateFieldGet(receiver, privateMap) {
            if (!privateMap.has(receiver)) {
              throw new TypeError("attempted to get private field on non-instance");
            }
            return privateMap.get(receiver);
          }
          function __classPrivateFieldSet(receiver, privateMap, value) {
            if (!privateMap.has(receiver)) {
              throw new TypeError("attempted to set private field on non-instance");
            }
            privateMap.set(receiver, value);
            return value;
          }
          var extensions = {
            "audio": [
              "aif",
              "cda",
              "mid",
              "midi",
              "mpa",
              "wma",
              "wpl"
            ],
            "audio-playable": ["mp3", "ogg", "wav"],
            "archive": ["7z", "arj", "deb", "pkg", "rar", "rpm", "tar.gz", "z", "zip"],
            "disc": [
              "dmg",
              "iso",
              "toast",
              "vcd"
            ],
            "database": [
              "csv",
              "dat",
              "db",
              "dbf",
              "log",
              "mdb",
              "sav",
              "sql",
              "tar"
            ],
            "executable": ["apk", "bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf", "ipa"],
            "font": ["fnt", "fon", "otf", "ttf"],
            "image": ["ai", "bmp", "gif", "ico", "jpeg", "jpg", "png", "ps", "psd", "svg", "tif", "tiff"],
            "markup": [
              "asp",
              "aspx",
              "cer",
              "cfm",
              "cgi",
              "pl",
              "css",
              "scss",
              "htm",
              "html",
              "jsp",
              "part",
              "php",
              "py",
              "rss",
              "xml",
              "xhtml"
            ],
            "presentation": ["key", "odp", "pps", "ppt", "pptx"],
            "script": ["c", "class", "cpp", "cs", "h", "java", "js", "json", "sh", "swift", "vb"],
            "sheet": ["ods", "xlr", "xls", "xlsx"],
            "system": [
              "bak",
              "cab",
              "cfg",
              "cpl",
              "cur",
              "dll",
              "dmp",
              "drv",
              "icns",
              "ini",
              "lnk",
              "msi",
              "sys",
              "tmp"
            ],
            "video": [
              "3g2",
              "3gp",
              "avi",
              "flv",
              "h264",
              "mkv",
              "mpg",
              "mpeg",
              "rm",
              "swf",
              "vob",
              "wmv"
            ],
            "video-playable": ["mp4", "webm", "mov"],
            "vue": ["vue"],
            "doc": [
              "doc",
              "docx",
              "odt",
              "rtf",
              "tex",
              "wks",
              "wps",
              "wpd"
            ],
            "text": ["txt"],
            "ebook": ["epub"],
            "pdf": ["pdf"],
            "folder": ["folder"],
            "play": ["play"]
          };
          var icons_e_1, icons_a;
          var SvgIcon = function() {
            function SvgIcon2(paths, color, viewBox) {
              this.paths = paths;
              this.color = color;
              this.viewBox = viewBox;
              this.category = "";
            }
            return SvgIcon2;
          }();
          var playIconPaths = ["M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm-4 29V15l12 9-12 9z"];
          var icons = {
            "folder": new SvgIcon([
              "M96.5 93.7h-93c-2 0-3.5-1.5-3.5-3.5V35.4h100v54.8c0 2-1.5 3.5-3.5 3.5z",
              "M44.9 20V9.7c0-2-1.5-3.5-3.5-3.5h-38C1.5 6.3 0 7.8 0 9.7v25.7h100V23.5c0-2-1.5-3.5-3.5-3.5H44.9z"
            ], "#efce4a"),
            "audio": new SvgIcon([
              "M32.5 37.5h-9v25h9L53.6 77V23L32.5 37.5M71.9 50c0 6.8-3.7 12.7-9.1 15.8l2.8 4.9c7.1-4.1 11.9-11.8 11.9-20.7 0-8.8-4.8-16.6-11.9-20.7l-2.8 4.9c5.4 3.1 9.1 9 9.1 15.8z",
              "M62.1 50c0 3.2-1.7 5.9-4.3 7.4l2.7 4.7c4.2-2.4 7-6.9 7-12.1 0-5.2-2.8-9.7-7-12.1l-2.7 4.7c2.6 1.5 4.3 4.2 4.3 7.4z"
            ], "#039"),
            "video": new SvgIcon([
              "M21 26.4v47.1h58V26.4H21zm10.9 43.5h-7.2v-7.2h7.2v7.2zm0-10.8h-7.2v-7.2h7.2v7.2zm0-10.9h-7.2V41h7.2v7.2zm0-10.9h-7.2v-7.2h7.2v7.2zm10.9 25.4V37.3L60.9 50 42.8 62.7zm32.6 7.2h-7.2v-7.2h7.2v7.2zm0-10.8h-7.2v-7.2h7.2v7.2zm0-10.9h-7.2V41h7.2v7.2zm0-10.9h-7.2v-7.2h7.2v7.2z"
            ], "#ef6f2e"),
            "audio-playable": new SvgIcon(playIconPaths, "#039", "0 0 48 48"),
            "video-playable": new SvgIcon(playIconPaths, "#ef6f2e", "0 0 48 48"),
            "archive": new SvgIcon([
              "M72.4 38.5h-7.9v-7.9l7.9 7.9zm-21.3-7.9v28.8h21.4v-19h-9.9v-9.9H51.1zm3.3-7.6H30.8v5.6h9.3l-5.9 4.5v4.8l8.6-6.6v-2.7h30.1v-2.3L54.4 23zM42.9 35.1l-8.6 6.6v4.8l8.6-6.6v-4.8zm-8.7 20l8.6-6.6v-4.8l-8.6 6.6v4.8zm8.7 2v-4.8l-8.6 6.6v2.6h-3.4v5.6h5.3v3.8H33c-.6-1-1.6-1.6-2.8-1.6-1.8 0-3.2 1.4-3.2 3.2s1.4 3.2 3.2 3.2c1.2 0 2.2-.6 2.8-1.6h3.1V77h4.8v-2.9H44c.6 1 1.6 1.6 2.8 1.6 1.8 0 3.2-1.4 3.2-3.2s-1.4-3.2-3.2-3.2c-1.2 0-2.2.6-2.8 1.6h-3.1v-3.8h13.5l18.5-3.3v-2.3H37.1l5.8-4.4z"
            ], "#ba8322"),
            "system": new SvgIcon([
              "M73.6 54.8c-2.1-.7-3.4-2.6-3.4-4.8s1.4-4.1 3.4-4.8c.6-.2 1-.9.8-1.5-.6-2.3-1.5-4.4-2.7-6.5-.3-.6-1.1-.8-1.7-.5-.7.4-1.6.6-2.4.6-2.8 0-5-2.3-5-5 0-.8.2-1.7.6-2.4.3-.6.1-1.3-.5-1.7-2-1.2-4.2-2.1-6.5-2.7-.6-.2-1.3.2-1.5.8-.7 2.1-2.6 3.4-4.8 3.4-2.2 0-4.1-1.4-4.8-3.4-.2-.6-.9-1-1.5-.8-2.3.6-4.4 1.5-6.5 2.7-.6.3-.8 1.1-.5 1.7.4.7.6 1.6.6 2.4 0 2.8-2.3 5-5 5-.8 0-1.7-.2-2.4-.6-.6-.3-1.3-.1-1.7.5-1.2 2-2.1 4.2-2.7 6.5-.2.6.2 1.3.8 1.5 2.1.7 3.4 2.6 3.4 4.8s-1.4 4.1-3.4 4.8c-.6.2-1 .9-.8 1.5.6 2.3 1.5 4.4 2.7 6.5.3.6 1.1.8 1.7.5.7-.4 1.6-.6 2.4-.6 2.8 0 5 2.3 5 5 0 .8-.2 1.7-.6 2.4-.3.6-.1 1.3.5 1.7 2 1.2 4.2 2.1 6.5 2.7h.3c.5 0 1-.3 1.2-.9.7-2.1 2.6-3.4 4.8-3.4 2.2 0 4.1 1.4 4.8 3.4.2.6.9 1 1.5.8 2.3-.6 4.4-1.5 6.5-2.7.6-.3.8-1.1.5-1.7-.4-.7-.6-1.6-.6-2.4 0-2.8 2.3-5 5-5 .8 0 1.7.2 2.4.6.6.3 1.3.1 1.7-.5 1.2-2 2.1-4.2 2.7-6.5.2-.5-.1-1.2-.8-1.4zM50 57.6c-4.2 0-7.6-3.4-7.6-7.6 0-4.2 3.4-7.6 7.6-7.6 4.2 0 7.6 3.4 7.6 7.6 0 4.2-3.4 7.6-7.6 7.6z"
            ], "#999"),
            "image": new SvgIcon([
              "m 40.400002,35 a 8,8 0 0 1 -8,8 8,8 0 0 1 -8,-8 8,8 0 0 1 8,-8 8,8 0 0 1 8,8 z",
              "M78.9 47.3l-9.7-9.6L50 57l-9.6-9.7-19.3 19.3V73h57.8z"
            ], "#5b2d8d"),
            "doc": new SvgIcon([
              "M29.6 53l-5.9-18.2c-.2-.7-.4-1-.5-1-.1-.1-.2-.1-.4-.2l-2.1-.6-.1-2.6h11l.2 2.6-2.1.6v.2c0 .2.1.7.4 1.2l2.2 7 3.9-11.7 3-.1 3.6 11.7 2.5-7c.1-.5.4-1 .4-1.2v-.1l-1.8-.5-.1-2.7h8.6l.2 2.6-2.3.7c-.1 0-.2.1-.4.1 0 .1-.2.2-.4.9L43 52.8l-3.1.2-3.3-11.2-3.9 11-3.1.2z",
              "M57.8 30.2h21.7v3.4H57.8zm0 9.2h21.7v3.4H57.8zm0 9.4h21.7v3.4H57.8zm-36.2 9.6h57.9v3.4H21.6zm0 9.4h57.9v3.4H21.6z"
            ], "#2372ba"),
            "executable": new SvgIcon(["M33.1 29.8l-6.6 6.6L37.2 47 26.5 57.6l6.6 6.6L50.2 47zm18.8 31.1h22.6v9.2H51.9z"], "#333"),
            "ebook": new SvgIcon([
              "M75.8 45.7c-.3-.6-.7-1.2-1.3-1.6-.1.5-.3 1-.6 1.5L58.3 69.8c-.6.9-1.9 1.1-2.9.8l-25-7c-1.5-.4-3.3-1.3-3.4-3 0-.6 0-.9.4-1.1.3-.3.8-.2 1.1-.1L52 66c3.4 1 4.4.2 6.9-3.5l14.4-22.2c.7-1.2.9-2.5.5-3.6s-1.4-2-2.7-2.4l-20.6-5.7c-.5-.1-1-.1-1.5-.1v-.1c-3.2-1.9-4.4 1.7-6 3-.6.5-1.4.8-1.7 1.3-.2.5-.1 1-.3 1.4-.6 1.4-2.4 3.6-3.3 4.3-.6.4-1.2.5-1.6 1.1-.3.4-.2 1.1-.4 1.6-.5 1.2-2.1 3.3-3.2 4.4-.4.4-1 .6-1.3 1.1-.3.4-.2 1.1-.4 1.6-.7 1.3-2.2 3.2-3.4 4.3-.6.6-1.3.9-1.6 1.5-.1.3 0 .7-.2 1.1-.2.6-.5 1.1-.7 1.7-.7.9-1 2.1-.9 3.4.2 3.1 2.5 6 5.3 6.8l25 7c2.3.6 5.2-.5 6.6-2.5l14.4-22.2c.7-1.1.9-2.4.5-3.6zm-28.9-7.9l1.1-1.6c.3-.4.9-.7 1.4-.5l16.5 4.6c.5.1.7.6.4 1l-1.1 1.6c-.3.4-.9.7-1.4.5l-16.5-4.6c-.5-.2-.7-.6-.4-1zM42.7 44l1.1-1.6c.3-.4.9-.7 1.4-.5l16.5 4.6c.5.1.7.6.4 1L60.9 49c-.3.4-.9.7-1.4.5L43.1 45c-.5-.1-.7-.6-.4-1z"
            ], "#963"),
            "markup": new SvgIcon([
              "M21.5 48.3l16.2-14v7.1l-11 9.2v.1l11 9.2V67L21.5 53v-4.7zm30.6-17.6h4.3L48 71.3h-4.2l8.3-40.6zM62.3 60l11-9.2v-.1l-11-9.2v-7.1l16.2 14v4.9l-16.2 14V60z"
            ]),
            "script": new SvgIcon([
              "M42.3 44.2h15.4V48H42.3v-3.8zm0 7.7h15.4v3.8H42.3v-3.8zm0 7.7h15.4v3.8H42.3v-3.8zM69.2 25H38.5c-4.2 0-7.7 3.4-7.7 7.7v34.6h-7.7c0 4.2 3.4 7.7 7.7 7.7h30.8c4.2 0 7.7-3.4 7.7-7.7V36.5H77v-3.8c-.1-4.3-3.5-7.7-7.8-7.7zm-3.8 41.6c0 2.5-2 4.5-4.5 4.5H32.7c1.9-1.3 1.9-3.8 1.9-3.8V32.7c0-2.1 1.7-3.8 3.8-3.8s3.8 1.7 3.8 3.8v3.8h23.1v30.1zM46.2 32.7v-3.8h23.1c3.5 0 3.8 2.2 3.8 3.8H46.2z"
            ]),
            "disc": new SvgIcon([
              "M46.9 50c0 .8.3 1.6.9 2.2 1.2 1.2 3.2 1.2 4.4 0 .6-.6.9-1.4.9-2.2 0-.8-.3-1.6-.9-2.2-.6-.6-1.4-.9-2.2-.9-.8 0-1.6.3-2.2.9-.6.6-.9 1.4-.9 2.2z",
              "M32.3 32.3c-9.8 9.8-9.8 25.6 0 35.4 9.8 9.8 25.6 9.8 35.4 0 9.8-9.8 9.8-25.6 0-35.4-9.8-9.7-25.6-9.7-35.4 0zm37 28.2c-.9 1.7-2.1 3.2-3.5 4.6-1.4 1.4-3 2.6-4.6 3.5l-5.8-11.1s.5-.2 1.6-1.2c1.1-1.1 1.3-1.6 1.3-1.6l11 5.8zM54.4 45.6c1.2 1.2 1.8 2.8 1.8 4.4 0 1.6-.6 3.2-1.8 4.4-2.4 2.4-6.4 2.4-8.8 0-1.2-1.2-1.8-2.8-1.8-4.4 0-1.6.6-3.2 1.8-4.4a6.1 6.1 0 0 1 8.8 0zm-8.5-4.4s-1.2.7-2.2 1.8c-.9 1-1 1.2-1.3 1.7l-11-5.9c.9-1.7 2.1-3.2 3.5-4.6 1.4-1.4 3-2.6 4.6-3.5l6.4 10.5z"
            ], "#c96"),
            "text": new SvgIcon(["M69.4 28.6v5.5H21.5v-5.5M30.6 41h47.9v5.6H30.6zm-9.1 12.4h47.9V59H21.5zm9.1 12.5h47.9v5.6H30.6z"], "#6b533b"),
            "database": new SvgIcon([
              "M48.1 75.5c-6.5-.3-12.3-2.3-15.4-5.4-.9-.9-1.8-2.1-2.2-2.9l-.3-.5v-6.1c0-6 0-6.1.1-5.6.3 1.3 1.1 2.7 2.3 3.7.8.7 2.5 1.8 3.8 2.5 2.4 1.2 5.2 2 8.4 2.5 1.9.3 2.6.3 5.3.3s3.4 0 5.3-.3c3.1-.5 6-1.3 8.3-2.5 1.4-.7 3-1.7 3.8-2.5 1.1-1 2-2.5 2.3-3.8.1-.5.1-.4.1 5.5v6l-.3.6c-1 1.9-2.6 3.6-4.7 4.8-4.3 2.7-10.5 4-16.8 3.7z",
              "M48.1 60.4c-5.7-.3-11-1.9-14.3-4.4-.7-.6-1.8-1.6-2.3-2.2-.4-.6-.8-1.2-1.1-1.8l-.3-.5v-6c0-5.9 0-6 .1-5.5.2.9.7 2 1.5 2.9.4.5 1.1 1.2 1.5 1.4.1.1.5.3.7.5 2.7 1.9 6.5 3.3 10.8 3.9 1.9.3 2.6.3 5.3.3s3.4 0 5.3-.3c3.1-.5 6-1.3 8.4-2.5 1.4-.7 3-1.8 3.9-2.5 1.1-1 2-2.4 2.2-3.7.1-.5.1-.4.1 5.5v5.9l-.4.8c-.7 1.2-1.1 1.8-1.9 2.7-.8.8-1.6 1.5-2.7 2.1-4.3 2.4-10.5 3.7-16.8 3.4z",
              "M47.7 45.4c-3.8-.3-6.8-.9-9.6-2-3.4-1.3-5.8-3.1-7.1-5.2-.3-.4-.5-1-.7-1.6-.2-.6-.3-2-.1-2.7.9-4.3 6.6-7.9 14.5-9 1.9-.3 2.6-.3 5.3-.3s3.4 0 5.3.3c3.1.5 6 1.3 8.4 2.5 3.5 1.7 5.6 4 6.1 6.5.1.7.1 2.1-.1 2.7-.4 1.3-1 2.2-2 3.2-2.8 2.9-7.9 4.9-14.1 5.6-.9-.1-5.1 0-5.9 0z"
            ], "#a03537"),
            "pdf": new SvgIcon([
              "M46.2 21.8c-3.5 0-6.3 2.9-6.3 6.3 0 4.3 2.4 9.6 4.9 14.7-2 6.1-4.1 12.7-7 18.2-5.8 2.3-11 4-14 6.6l-.2.2c-1.1 1.2-1.8 2.7-1.8 4.4 0 3.5 2.9 6.3 6.3 6.3 1.7 0 3.4-.6 4.4-1.8 0 0 .2 0 .2-.2 2.3-2.7 5-7.8 7.5-12.2 5.5-2.1 11.5-4.4 16.9-5.8 4.1 3.4 10.1 5.5 15 5.5 3.5 0 6.3-2.9 6.3-6.3 0-3.5-2.9-6.3-6.3-6.3-4 0-9.6 1.4-13.9 2.9-3.5-3.4-6.7-7.5-9.2-11.9C50.6 37 52.6 32 52.6 28c-.2-3.5-2.9-6.2-6.4-6.2zm0 3.6c1.4 0 2.4 1.1 2.4 2.4 0 1.8-1.1 5.3-2.1 9-1.5-3.7-2.9-7.2-2.9-9 .1-1.2 1.2-2.4 2.6-2.4zm1.1 21.5c1.8 3.1 4.1 5.8 6.6 8.2-3.7 1.1-7.3 2.3-11 3.7 1.8-3.8 3.1-7.9 4.4-11.9zM72 55c1.4 0 2.4 1.1 2.4 2.4 0 1.4-1.1 2.4-2.4 2.4-2.9 0-6.9-1.2-10.1-3.1C65.6 56 69.7 55 72 55zM34.6 66.2c-1.8 3.2-3.5 6.1-4.7 7.6-.5.5-.9.6-1.7.6-1.4 0-2.4-1.1-2.4-2.4 0-.6.3-1.4.6-1.7 1.3-1.2 4.5-2.6 8.2-4.1z"
            ], "#c11e07"),
            "sheet": new SvgIcon([
              "M62.1 30.9h14.1v9.4H62.1zm0 14.5h14.1v9.4H62.1zm0 14.3h14.1v9.4H62.1zm-19.2 0H57v9.4H42.9zm-19 0H38v9.4H23.9zm19.2-14.2h14.1v9.4H43.1zm-19.2 0H38v9.4H23.9zm19.2-14.6h14.1v9.4H43.1zm-19.2 0H38v9.4H23.9z"
            ], "#30723f"),
            "presentation": new SvgIcon([
              "M 73.319289,26.32707 H 26.61477 c -2.335226,0 -4.258353,1.917194 -4.258353,4.245215 v 29.853446 c 0,2.328021 1.923127,4.245215 4.258353,4.245215 h 19.506006 l -1.923128,7.257947 h -2.197859 c -0.961564,0 -1.648395,0.684712 -1.648395,1.643309 0,0.958597 0.686831,1.643309 1.648395,1.643309 h 15.797117 c 0.961563,0 1.648394,-0.684712 1.648394,-1.643309 0,-0.958597 -0.686831,-1.643309 -1.648394,-1.643309 H 55.46168 l -1.923128,-7.39489 h 19.780737 c 2.335226,0 4.258353,-1.917193 4.258353,-4.245214 V 30.572285 c 0,-2.328021 -1.923127,-4.245215 -4.258353,-4.245215 z m 0.412099,34.372546 H 26.202672 V 30.2984 h 47.39135 z",
              "m 38.428266,48.511741 h 3.846255 v 7.668775 h -3.846255 z m 6.456214,-2.464963 h 3.846254 V 56.180516 H 44.88448 Z m 6.318846,-2.601906 h 3.846255 v 12.735644 h -3.846255 z m 6.318847,-2.464964 h 3.846255 v 15.200608 h -3.846255 z m -0.274732,-5.614639 -6.730946,3.697445 -4.945184,-1.643308 -8.379341,4.519099 1.236296,1.369424 7.417777,-3.834387 4.945185,1.643309 7.692509,-4.245215 1.236296,1.369424 2.88469,-4.792984 -6.593578,0.410827 z"
            ], "#c24f32"),
            "font": new SvgIcon([
              "M40.4 56.2H28.7l-1.4 3.1c-.5 1-.7 1.9-.7 2.6 0 .9.4 1.6 1.1 2 .4.3 1.5.4 3.2.6v.9H20v-.9c1.2-.2 2.2-.6 2.9-1.4.8-.8 1.7-2.4 2.8-4.8l11.8-25.6h.5l12 26.2c1.1 2.5 2.1 4.1 2.8 4.7.6.5 1.3.8 2.3.9v.9h-16v-.9h.7c1.3 0 2.2-.2 2.7-.5.4-.3.5-.6.5-1.1 0-.3 0-.6-.1-.9 0-.1-.3-.7-.7-1.8l-1.8-4zm-.8-1.8l-4.9-11-5.1 11h10z",
              "M80 44.2l-4.7 15.7-.5 1.9c0 .2-.1.4-.1.5 0 .2.1.4.2.5.1.2.3.2.4.2.3 0 .8-.3 1.4-.8.2-.2.8-.9 1.8-2.2l.9.4c-1.2 2-2.4 3.5-3.7 4.5-1.3.9-2.7 1.4-4.2 1.4-.9 0-1.6-.2-2.1-.7-.5-.5-.7-1-.7-1.8 0-.6.3-1.8.8-3.4l.6-1.9c-1.9 3.1-3.7 5.4-5.4 6.7-1 .8-2.1 1.1-3.2 1.1-1.5 0-2.6-.6-3.2-1.8-.7-1.2-1-2.5-1-4 0-2.2.7-4.8 2.1-7.6 1.4-2.9 3.2-5.2 5.5-6.9 1.9-1.4 3.6-2.2 5.3-2.2.9 0 1.6.3 2.2.8.6.5 1 1.4 1.2 2.8l.9-2.9 5.5-.3zm-7.8 4.5c0-1.3-.2-2.2-.6-2.8-.3-.4-.7-.6-1.2-.6s-1 .2-1.6.7c-1.1 1-2.3 3-3.5 5.9-1.3 3-1.9 5.6-1.9 7.7 0 .8.1 1.4.4 1.8.3.4.6.6.9.6.7 0 1.5-.4 2.2-1.2 1.1-1.2 2-2.6 2.9-4.3 1.6-2.9 2.4-5.5 2.4-7.8z"
            ], "#7291a1"),
            "vue": new SvgIcon([
              "M 66.425365,28.281905 H 56.751974 L 49.707631,39.427061 43.669624,28.281905 H 21.530262 L 49.707631,76.54823 77.885006,28.281905 Z m -37.888497,4.025337 h 6.767604 L 49.707631,57.239179 64.098226,32.307242 h 6.767597 L 49.707631,68.560446 Z"
            ], "#41B883"),
            "other": new SvgIcon([
              "M71 36.3L57.8 23.1c-.4-.4-.9-.6-1.4-.6h-26c-1.1 0-2 .9-2 2v51.1c0 1.1.9 2 2 2h39.3c1.1 0 2-.9 2-2V37.7c-.1-.5-.3-1-.7-1.4zm-3.9 2.3H55.5V27l11.6 11.6zm.1 34.5H32.8V26.9h18.5v13.3c0 1.4 1.2 2.6 2.6 2.6h13.3v30.3z"
            ]),
            "system-close": new SvgIcon(["M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"], void 0, "0 0 24 24"),
            "system-file-preview-new": new SvgIcon([
              "M745,353c-5.6,0-11.3,0.2-17.2,0.7C687.4,237.3,577.8,157,451,157c-162.1,0-294,131.9-294,294c0,2.1,0,4.1,0,6.2C72.6,479,10,555.8,10,647c0,108.1,87.9,196,196,196h245V618.3l-63.4,63.4c-9.6,9.6-22.1,14.4-34.6,14.4s-25.1-4.8-34.6-14.4c-19.2-19.2-19.2-50.1,0-69.3l147-147c4.6-4.6,9.9-8.1,16-10.6c12-4.9,25.5-4.9,37.4,0c6,2.5,11.4,6.1,16,10.6l147,147c19.2,19.2,19.2,50.1,0,69.3c-9.6,9.6-22.1,14.4-34.6,14.4s-25.1-4.8-34.6-14.4L549,618.3V843h196c135.1,0,245-109.9,245-245S880.1,353,745,353z"
            ], void 0, "0 0 1000 1000"),
            "system-sortable-handle": new SvgIcon(["M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"], void 0, "0 0 24 24"),
            "system-file-av-play": new SvgIcon(["M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm-4 29V15l12 9-12 9z"], void 0, "0 0 48 48"),
            "system-file-name-edit": new SvgIcon([
              "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
            ], void 0, "0 0 24 24")
          };
          for (var category in icons) {
            if (icons.hasOwnProperty(category)) {
              icons[category].category = category;
            }
          }
          var lib_icons = icons;
          var extensionsMap = {};
          for (var cat in extensions) {
            if (extensions.hasOwnProperty(cat)) {
              try {
                for (var icons_b = (icons_e_1 = void 0, __values(extensions[cat])), icons_c = icons_b.next(); !icons_c.done; icons_c = icons_b.next()) {
                  var icons_ext = icons_c.value;
                  extensionsMap[icons_ext] = cat;
                }
              } catch (e_1_1) {
                icons_e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (icons_c && !icons_c.done && (icons_a = icons_b.return))
                    icons_a.call(icons_b);
                } finally {
                  if (icons_e_1)
                    throw icons_e_1.error;
                }
              }
            }
          }
          function getIconByName(name) {
            var svgIcon = icons[name] || icons.other;
            return svgIcon;
          }
          function getIconFromExt(ext) {
            ext = ext.toLowerCase();
            var cat2 = extensionsMap[ext];
            return getIconByName(cat2);
          }
          var external_commonjs_vue_commonjs2_vue_root_Vue_ = __webpack_require__("8bbf");
          var external_commonjs_vue_commonjs2_vue_root_Vue_default = __webpack_require__.n(external_commonjs_vue_commonjs2_vue_root_Vue_);
          var vue_file_iconvue_type_script_lang_ts_ = external_commonjs_vue_commonjs2_vue_root_Vue_default.a.extend({
            props: ["ext", "name", "viewBox"],
            computed: {
              viewBoxComputed: function() {
                if (!this.viewBox && this.icon && this.icon.viewBox) {
                  return this.icon.viewBox;
                }
                return this.viewBox ? this.viewBox : "0 0 100 100";
              },
              icon: function() {
                if (this.name) {
                  return getIconByName(this.name);
                }
                var svgIcon = getIconFromExt(this.ext);
                return svgIcon;
              }
            }
          });
          var components_vue_file_iconvue_type_script_lang_ts_ = vue_file_iconvue_type_script_lang_ts_;
          function normalizeComponent(scriptExports, render5, staticRenderFns2, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render5) {
              options.render = render5;
              options.staticRenderFns = staticRenderFns2;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h, context) {
                  hook.call(context);
                  return originalRender(h, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
          var component = normalizeComponent(components_vue_file_iconvue_type_script_lang_ts_, render4, staticRenderFns, false, null, null, null);
          var vue_file_icon = component.exports;
          var vue_file_previewvue_type_template_id_89d27d16_render = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", { class: [
              "file-preview-wrapper-" + _vm.fileRecord.ext(),
              _vm.fileRecord.isImage() ? "file-preview-wrapper-image" : "file-preview-wrapper-other",
              "file-category-" + _vm.fileRecord.icon().category,
              { "file-is-playing-av": _vm.fileRecord.isPlayingAv },
              { "is-deletable": _vm.deletable === true },
              { "is-editable": _vm.editable === true },
              { "is-edit-input-focused": _vm.isEditInputFocused },
              { "has-error": _vm.fileRecord.error }
            ] }, [_vm.fileRecord.isPlayableAudio() || _vm.fileRecord.isPlayableVideo() ? _c("div", { ref: "wrapper", staticClass: "file-av-wrapper" }, [_c("div", { staticClass: "file-av-action", on: { "click": function($event) {
              return _vm.playAv(_vm.fileRecord);
            } } }, [_c("span", { staticClass: "file-av-stop" }, [_c("VueFileIcon", { attrs: { "name": "system-close" } })], 1), _c("span", { staticClass: "file-av-play" }, [_c("VueFileIcon", { attrs: { "name": "system-file-av-play" } })], 1)])]) : _vm._e(), _c("span", { staticClass: "file-preview", class: {
              "image-preview": _vm.fileRecord.isImage(),
              "other-preview": !_vm.fileRecord.isImage(),
              "dark-content": _vm.fileRecord.isImage() && _vm.fileRecord.isDarkColor()
            }, style: {
              "background-color": _vm.fileRecord.color()
            } }, [_vm.fileRecord.error ? _c("span", { staticClass: "file-error-wrapper", on: { "click": function($event) {
              return _vm.dismissError();
            } } }, [_c("span", { staticClass: "file-error-message file-error-message-client" }, [_vm._v(" " + _vm._s(_vm.fileRecord.getErrorMessage(_vm.errorText)) + " ")])]) : _vm._e(), _c("span", { staticClass: "file-preview-overlay" }), _vm.fileRecord.isImage() || _vm.fileRecord.isPlayableVideo() ? _c("span", { staticClass: "thumbnail", staticStyle: { "position": "absolute", "top": "0", "right": "0", "bottom": "0", "left": "0", "overflow": "hidden" } }, [_vm.hasLinkableUrl ? _c("a", { attrs: { "href": _vm.fileRecord.url(), "target": "_blank", "title": _vm.fileRecord.name() } }, [_c("img", { staticClass: "file-preview-img", attrs: { "src": _vm.fileRecord.src() } })]) : _c("img", { staticClass: "file-preview-img", attrs: { "src": _vm.fileRecord.src() } })]) : _vm._e(), _c("span", { staticClass: "file-ext" }, [_vm._v(_vm._s(_vm.fileRecord.ext()))]), _c("span", { staticClass: "file-size" }, [_vm._v(_vm._s(_vm.fileRecord.size()))]), _vm.deletable ? _c("span", { staticClass: "file-delete", on: { "click": function($event) {
              return _vm.removeFileRecord(_vm.fileRecord);
            }, "touchstart": function($event) {
              return _vm.filenameClearPressed();
            }, "mousedown": function($event) {
              return _vm.filenameClearPressed();
            } } }, [_c("VueFileIcon", { attrs: { "name": "system-close" } })], 1) : _vm._e(), _c("span", { staticClass: "file-name", on: { "click": function($event) {
              return _vm.editFileName();
            } } }, [_vm.editable === true ? _c("input", { ref: "input", staticClass: "file-name-input", attrs: { "disabled": _vm.disabled === true, "type": "text" }, domProps: { "value": _vm.fileRecord.name(true) }, on: { "focus": function($event) {
              return _vm.editInputFocused();
            }, "blur": function($event) {
              return _vm.editInputBlured();
            }, "change": function($event) {
              return _vm.filenameChanged();
            }, "input": function($event) {
              return _vm.filenameChanged();
            }, "keyup": [function($event) {
              if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                return null;
              }
              return _vm.filenameChanged(true);
            }, function($event) {
              if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "esc", 27, $event.key, ["Esc", "Escape"])) {
                return null;
              }
              return _vm.filenameChanged(false);
            }] } }) : _vm._e(), _vm.editable === true ? _c("span", { staticClass: "file-name-edit-icon" }, [_c("VueFileIcon", { attrs: { "name": "system-file-name-edit" } })], 1) : _vm._e(), _c("span", { staticClass: "file-name-text" }, [_vm._v(_vm._s(_vm.fileRecord.name(true)))])]), _vm.fileRecord.dimensions.width && _vm.fileRecord.dimensions.height ? _c("span", { staticClass: "image-dimension" }, [_c("span", { staticClass: "image-dimension-width" }, [_vm._v(_vm._s(_vm.fileRecord.dimensions.width))]), _c("span", { staticClass: "image-dimension-height" }, [_vm._v(_vm._s(_vm.fileRecord.dimensions.height))])]) : _vm._e(), _vm.fileRecord.hasProgress() ? _c("span", { staticClass: "file-progress", class: {
              "file-progress-full": _vm.fileRecord.progress() >= 99.9999,
              "file-progress-done": _vm.fileRecord.progress() >= 100,
              "has-file-progress": _vm.fileRecord.progress() > 0
            } }, [_c("span", { staticClass: "file-progress-bar", style: { width: _vm.fileRecord.progress() + "%" } })]) : _vm._e(), _c("span", { staticClass: "file-icon" }, [_vm.hasLinkableUrl ? _c("a", { attrs: { "href": _vm.fileRecord.url(), "target": "_blank", "title": _vm.fileRecord.name() } }, [_c("VueFileIcon", { attrs: { "ext": _vm.fileRecord.ext() } })], 1) : _c("VueFileIcon", { attrs: { "ext": _vm.fileRecord.ext() } })], 1)])]);
          };
          var vue_file_previewvue_type_template_id_89d27d16_staticRenderFns = [];
          function getFilesFromDroppedItems(dataTransfer) {
            return new Promise(function(resolve) {
              if (!includesFolder(dataTransfer)) {
                return resolve(dataTransfer.files);
              }
              var files = [];
              var folderReadQueue = [];
              for (var i = 0; i < dataTransfer.items.length; i++) {
                var item = dataTransfer.items[i];
                if (item.kind !== "file") {
                  continue;
                }
                var fileSystemEntries = getEntries(item);
                if (fileSystemEntries) {
                  folderReadQueue.push(fileSystemEntries);
                } else {
                  var file = item.getAsFile();
                  if (file) {
                    files.push(file);
                  }
                }
              }
              Promise.all(folderReadQueue).then(function(filesInFolders) {
                resolve(files.concat.apply(files, __spread(filesInFolders)));
              });
            });
          }
          function getEntries(entry) {
            if (entry.getAsEntry) {
              return getEntries(entry.getAsEntry());
            }
            if (entry.webkitGetAsEntry) {
              return getEntries(entry.webkitGetAsEntry());
            }
            if (entry.getAsFile) {
              return;
            }
            return new Promise(function(resolve) {
              if (entry.isFile) {
                entry.file(function(file) {
                  return resolve([file]);
                });
                return;
              }
              if (entry.isDirectory) {
                var files_1 = [];
                var entryReader_1 = entry.createReader();
                var readEntries_1 = function() {
                  entryReader_1.readEntries(function(entries) {
                    var iterateEntry = function(i) {
                      if (!entries[i] && i === 0) {
                        return resolve(files_1);
                      }
                      if (!entries[i]) {
                        return readEntries_1();
                      }
                      getEntries(entries[i]).then(function(entryFiles) {
                        files_1.push.apply(files_1, __spread(entryFiles));
                        iterateEntry(i + 1);
                      });
                    };
                    iterateEntry(0);
                  });
                };
                readEntries_1();
              }
              if (!entry.isFile && !entry.isDirectory) {
                resolve([]);
              }
            });
          }
          function includesFolder(transfer) {
            var e_1, _a;
            if (!transfer.files.length) {
              return true;
            }
            try {
              for (var _b = __values(transfer.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (item.webkitGetAsEntry != null) {
                  var entry = item.webkitGetAsEntry();
                  if (entry && entry.isDirectory) {
                    return true;
                  }
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a = _b.return))
                  _a.call(_b);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            var files = transfer.files;
            for (var i = 0; i < files.length; i++) {
              if (!files[i].type && files[i].size % 4096 === 0) {
                return true;
              }
            }
            return false;
          }
          var ImageOrientation;
          (function(ImageOrientation2) {
            ImageOrientation2[ImageOrientation2["NORMAL"] = 1] = "NORMAL";
            ImageOrientation2[ImageOrientation2["UPSIDE_DOWN"] = 6] = "UPSIDE_DOWN";
          })(ImageOrientation || (ImageOrientation = {}));
          var utils_Utils = function() {
            function Utils() {
            }
            Utils.prototype.arrayMove = function(arr, previousIndex, newIndex) {
              var array = arr.slice(0);
              if (newIndex >= array.length) {
                var k = newIndex - array.length;
                while (k-- + 1) {
                  array.push(void 0);
                }
              }
              array.splice(newIndex, 0, array.splice(previousIndex, 1)[0]);
              return array;
            };
            Utils.prototype.getAverageColor = function(arr) {
              var bytesPerPixel = 4;
              var arrLength = arr.length;
              if (arrLength < bytesPerPixel) {
                return;
              }
              var step = 5;
              var len = arrLength - arrLength % bytesPerPixel;
              var preparedStep = (step || 1) * bytesPerPixel;
              var redTotal = 0;
              var greenTotal = 0;
              var blueTotal = 0;
              var alphaTotal = 0;
              var count = 0;
              for (var i = 0; i < len; i += preparedStep) {
                var alpha = arr[i + 3];
                var red = arr[i] * alpha;
                var green = arr[i + 1] * alpha;
                var blue = arr[i + 2] * alpha;
                redTotal += red;
                greenTotal += green;
                blueTotal += blue;
                alphaTotal += alpha;
                count++;
              }
              return alphaTotal ? [
                Math.round(redTotal / alphaTotal),
                Math.round(greenTotal / alphaTotal),
                Math.round(blueTotal / alphaTotal),
                Math.round(alphaTotal / count)
              ] : [0, 0, 0, 0];
            };
            Utils.prototype.createVideoThumbnail = function(video, canvas, thumbnailSize, calculateAverageColor) {
              var _this = this;
              video.setAttribute("crossOrigin", "anonymous");
              return new Promise(function(resolve, reject) {
                var loadedmetadata = false;
                var loadeddata = false;
                var tryGetThumbnail = function() {
                  if (!(loadedmetadata && loadeddata)) {
                    return;
                  }
                  var context = canvas.getContext("2d");
                  context.drawImage(video, 0, 0, canvas.width, canvas.height);
                  var color;
                  if (calculateAverageColor) {
                    var imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                    color = _this.getAverageColor(imageData.data);
                  }
                  var url = canvas.toDataURL();
                  resolve({
                    url,
                    color,
                    width: video.videoWidth,
                    height: video.videoHeight
                  });
                };
                video.addEventListener("loadedmetadata", function() {
                  canvas.width = thumbnailSize;
                  canvas.height = canvas.width / video.videoWidth * video.videoHeight;
                  video.currentTime = 1;
                  loadedmetadata = true;
                  tryGetThumbnail();
                });
                video.addEventListener("loadeddata", function() {
                  loadeddata = true;
                  tryGetThumbnail();
                });
              });
            };
            Utils.prototype.getDataURL = function(file) {
              return new Promise(function(resolve, reject) {
                var reader = new FileReader();
                reader.onload = function(event) {
                  if (!(event.target && event.target.result)) {
                    return resolve("");
                  }
                  resolve(event.target.result);
                };
                reader.readAsDataURL(file);
              });
            };
            Utils.prototype.getImageOrientationFromArrayBuffer = function(buffer) {
              var view = new DataView(buffer);
              if (view.getUint16(0, false) !== 65496) {
                return -2;
              }
              var length = view.byteLength;
              var offset = 2;
              while (offset < length) {
                if (view.getUint16(offset + 2, false) <= 8) {
                  return -1;
                }
                var marker = view.getUint16(offset, false);
                offset += 2;
                if (marker === 65505) {
                  if (view.getUint32(offset += 2, false) !== 1165519206) {
                    return -1;
                  }
                  var little = view.getUint16(offset += 6, false) === 18761;
                  offset += view.getUint32(offset + 4, little);
                  var tags = view.getUint16(offset, little);
                  offset += 2;
                  for (var i = 0; i < tags; i++) {
                    if (view.getUint16(offset + i * 12, little) === 274) {
                      return view.getUint16(offset + i * 12 + 8, little);
                    }
                  }
                } else if ((marker & 65280) !== 65280) {
                  break;
                } else {
                  offset += view.getUint16(offset, false);
                }
              }
              return -1;
            };
            Utils.prototype.getImageOrientation = function(file) {
              var _this = this;
              return new Promise(function(resolve, reject) {
                var reader = new FileReader();
                if (!reader.readAsArrayBuffer) {
                  return resolve(-3);
                }
                reader.onload = function(event) {
                  if (!(event.target && event.target.result)) {
                    return resolve(-3);
                  }
                  resolve(_this.getImageOrientationFromArrayBuffer(event.target.result));
                };
                reader.readAsArrayBuffer(file.slice(0, 65536));
              });
            };
            Utils.prototype.rotateCanvas = function(srcOrientation, canvas, ctx, width, height) {
              if (4 < srcOrientation && srcOrientation < 9) {
                canvas.width = height;
                canvas.height = width;
              } else {
                canvas.width = width;
                canvas.height = height;
              }
              switch (srcOrientation) {
                case 2:
                  ctx.transform(-1, 0, 0, 1, width, 0);
                  break;
                case 3:
                  ctx.transform(-1, 0, 0, -1, width, height);
                  break;
                case 4:
                  ctx.transform(1, 0, 0, -1, 0, height);
                  break;
                case 5:
                  ctx.transform(0, 1, 1, 0, 0, 0);
                  break;
                case 6:
                  ctx.transform(0, 1, -1, 0, height, 0);
                  break;
                case 7:
                  ctx.transform(0, -1, -1, 0, height, width);
                  break;
                case 8:
                  ctx.transform(0, -1, 1, 0, 0, width);
                  break;
                default:
                  break;
              }
            };
            Utils.prototype.getImageResized = function(image, widthLimit, heightLimit, orientation, calculateAverageColor) {
              var width = image.width;
              var height = image.height;
              var thumbnailSize = widthLimit;
              if (widthLimit && heightLimit) {
                width = widthLimit;
                height = heightLimit;
              } else {
                if (width > height) {
                  if (width > thumbnailSize) {
                    height *= thumbnailSize / width;
                    width = thumbnailSize;
                  }
                } else {
                  if (height > thumbnailSize) {
                    width *= thumbnailSize / height;
                    height = thumbnailSize;
                  }
                }
              }
              width = Math.floor(width);
              height = Math.floor(height);
              var canvas = document.createElement("canvas");
              var context = canvas.getContext("2d");
              if (!context) {
                return null;
              }
              canvas.width = width;
              canvas.height = height;
              if (orientation !== void 0) {
                this.rotateCanvas(orientation, canvas, context, width, height);
              }
              context.drawImage(image, 0, 0, width, height);
              var avgColor = null;
              try {
                var rgba = void 0;
                if (calculateAverageColor) {
                  var imageData = context.getImageData(0, 0, width, height);
                  rgba = this.getAverageColor(imageData.data);
                }
                if (rgba) {
                  avgColor = rgba;
                }
              } catch (e) {
              }
              return {
                image,
                url: canvas.toDataURL("image/png"),
                color: avgColor
              };
            };
            Utils.prototype.resizeImageUrl = function(image, url, thumbnailSize, calculateAverageColor) {
              var _this = this;
              return new Promise(function(resolve, reject) {
                image.onload = function() {
                  if (!calculateAverageColor) {
                    resolve({
                      image,
                      url,
                      color: void 0
                    });
                    return;
                  }
                  var resized = _this.getImageResized(image, thumbnailSize, void 0, void 0, calculateAverageColor);
                  if (resized) {
                    resized.url = url;
                  }
                  resolve(resized);
                };
                image.onerror = function() {
                  reject("Image loading failed: " + url);
                };
                image.src = url;
              });
            };
            Utils.prototype.resizeImageFile = function(image, file, thumbnailSize, calculateAverageColor) {
              var _this = this;
              return new Promise(function(resolve, reject) {
                if (file.type.indexOf("image") === -1) {
                  reject(new Error("Not an image"));
                  return;
                }
                var createObjectURL = (window.URL || window.webkitURL || {}).createObjectURL;
                var revokeObjectURL = (window.URL || window.webkitURL || {}).revokeObjectURL;
                var shouldRevoke = false;
                var orientationPromise = _this.getImageOrientation(file);
                image.onload = function() {
                  orientationPromise.then(function(orientation) {
                    var resized = _this.getImageResized(image, thumbnailSize, void 0, orientation, calculateAverageColor);
                    if (shouldRevoke) {
                      revokeObjectURL(image.src);
                    }
                    resolve(resized);
                  });
                };
                if (!(file instanceof File)) {
                  return reject("Invalid file object. Use url or a valid instance of File class");
                }
                if (createObjectURL && revokeObjectURL) {
                  shouldRevoke = true;
                  image.src = createObjectURL(file);
                  return;
                }
                _this.getDataURL(file).then(function(dataUrl) {
                  image.src = dataUrl;
                });
              });
            };
            Utils.prototype.resizeImage = function(thumbnailSize, file, url, calculateAverageColor) {
              var image = new Image();
              image.setAttribute("crossOrigin", "anonymous");
              return url ? this.resizeImageUrl(image, url, thumbnailSize, calculateAverageColor) : this.resizeImageFile(image, file, thumbnailSize, calculateAverageColor);
            };
            Utils.prototype.getSizeFormatted = function(bytes) {
              var sizes = ["B", "KB", "MB", "GB", "TB"];
              if (bytes === 0) {
                return "0 B";
              }
              var i = Math.floor(Math.log(bytes) / Math.log(1024));
              i = parseInt("" + i, 10);
              return Math.round(bytes / Math.pow(1024, i)) + " " + sizes[i];
            };
            Utils.prototype.getSizeParsed = function(size) {
              size = ("" + size).toUpperCase();
              var matches2 = size.match(/([\d|.]+?)\s*?([A-Z]+)/);
              var sizes = ["B", "KB", "MB", "GB", "TB"];
              if (!matches2) {
                return parseFloat(size);
              }
              var i = sizes.indexOf(matches2[2]);
              if (i === -1) {
                return parseFloat(size);
              }
              return parseFloat(matches2[1]) * Math.pow(1024, i);
            };
            Utils.prototype.getColorForText = function(text) {
              var getHashCode = function(value) {
                var hash = 0;
                if (value.length === 0) {
                  return hash;
                }
                for (var i = 0; i < value.length; i++) {
                  hash = value.charCodeAt(i) + ((hash << 5) - hash);
                  hash = hash & hash;
                }
                return hash;
              };
              var intToHSL = function(value) {
                var h = value % 360;
                var s = value % 100;
                var l = 50;
                return "hsl(" + h + "," + s + "%," + l + "%, 0.75)";
              };
              return intToHSL(getHashCode(text.toLowerCase()));
            };
            Utils.prototype.validateType = function(file, accept) {
              var e_1, _a;
              if (!accept) {
                return true;
              }
              var acceptedFiles = accept.split(",");
              var mimeType = file.type;
              var baseMimeType = mimeType.replace(/\/.*$/, "");
              try {
                for (var acceptedFiles_1 = __values(acceptedFiles), acceptedFiles_1_1 = acceptedFiles_1.next(); !acceptedFiles_1_1.done; acceptedFiles_1_1 = acceptedFiles_1.next()) {
                  var validType = acceptedFiles_1_1.value;
                  validType = validType.trim();
                  if (validType.charAt(0) === ".") {
                    if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
                      return true;
                    }
                  } else if (/\/\*$/.test(validType)) {
                    if (baseMimeType === validType.replace(/\/.*$/, "")) {
                      return true;
                    }
                  } else {
                    if (mimeType === validType) {
                      return true;
                    }
                  }
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (acceptedFiles_1_1 && !acceptedFiles_1_1.done && (_a = acceptedFiles_1.return))
                    _a.call(acceptedFiles_1);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              return false;
            };
            Utils.prototype.validateSize = function(file, maxSize) {
              if (!maxSize) {
                return true;
              }
              var bytes = this.getSizeParsed(maxSize);
              return file.size <= bytes;
            };
            Utils.prototype.getFilesFromDroppedItems = function(dataTransfer) {
              return getFilesFromDroppedItems(dataTransfer);
            };
            return Utils;
          }();
          var utils = new utils_Utils();
          var file_record_FileRecord = function() {
            function FileRecord(data, options) {
              this.urlValue = null;
              this.urlResized = null;
              this.image = {};
              this.isPlayingAv = false;
              this.oldFileName = null;
              this.oldCustomName = null;
              this.upload = { data: null, error: false };
              this.urlValue = null;
              this.urlResized = null;
              this.lastKnownSrc = null;
              this.image = {};
              this.isPlayingAv = false;
              this.oldFileName = null;
              this.oldCustomName = null;
              this.raw = data;
              this.file = data.file instanceof File ? data.file : this.createDummyFile(data);
              this.progressInternal = !isNaN(data.progress) ? data.progress : 0;
              this.thumbnailSize = options.thumbnailSize || 360;
              this.read = !!options.read;
              this.dimensions = data.dimensions || { width: 0, height: 0 };
              this.dimensions.width = this.dimensions.width || 0;
              this.dimensions.height = this.dimensions.height || 0;
              this.error = data.error || false;
              this.options = options;
              this.maxSize = options.maxSize;
              this.accept = options.accept;
              this.id = Math.random() + ":" + new Date().getTime();
              this.videoThumbnail = data.videoThumbnail;
              this.imageColor = data.imageColor;
              this.customName = data.customName;
              this.calculateAverageColor = options.averageColor !== void 0 ? options.averageColor : true;
              this.validate();
            }
            FileRecord.getFromRaw = function(rawFileRecord, options, isSync) {
              if (isSync === void 0) {
                isSync = false;
              }
              var fileRecord = new FileRecord(rawFileRecord, options);
              var promise = fileRecord.setUrl(rawFileRecord.url);
              rawFileRecord.progress = fileRecord.progress.bind(fileRecord);
              rawFileRecord.src = fileRecord.src.bind(fileRecord);
              rawFileRecord.name = fileRecord.name.bind(fileRecord);
              if (isSync) {
                return fileRecord;
              }
              return promise;
            };
            FileRecord.fromRaw = function(rawFileRecord, options) {
              return FileRecord.getFromRaw(rawFileRecord, options, false);
            };
            FileRecord.fromRawSync = function(rawFileRecord, options) {
              return FileRecord.getFromRaw(rawFileRecord, options, true);
            };
            FileRecord.fromRawArray = function(rawFileRecords, options) {
              var e_1, _a;
              var promises = [];
              try {
                for (var rawFileRecords_1 = __values(rawFileRecords), rawFileRecords_1_1 = rawFileRecords_1.next(); !rawFileRecords_1_1.done; rawFileRecords_1_1 = rawFileRecords_1.next()) {
                  var rawFileRecord = rawFileRecords_1_1.value;
                  promises.push(FileRecord.fromRaw(rawFileRecord, options));
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (rawFileRecords_1_1 && !rawFileRecords_1_1.done && (_a = rawFileRecords_1.return))
                    _a.call(rawFileRecords_1);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              return Promise.all(promises);
            };
            FileRecord.toRawArray = function(fileRecords) {
              var e_2, _a;
              var rawFileRecords = [];
              try {
                for (var fileRecords_1 = __values(fileRecords), fileRecords_1_1 = fileRecords_1.next(); !fileRecords_1_1.done; fileRecords_1_1 = fileRecords_1.next()) {
                  var fileRecord = fileRecords_1_1.value;
                  rawFileRecords.push(fileRecord.toRaw());
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (fileRecords_1_1 && !fileRecords_1_1.done && (_a = fileRecords_1.return))
                    _a.call(fileRecords_1);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
              return rawFileRecords;
            };
            FileRecord.readFile = function(fileRecord) {
              return new Promise(function(resolve, reject) {
                if (!fileRecord.read) {
                  fileRecord.setUrl(null).then(function() {
                    resolve(fileRecord);
                  }, function(err) {
                    resolve(fileRecord);
                  });
                  return;
                }
                utils.getDataURL(fileRecord.file).then(function(dataUrl) {
                  fileRecord.setUrl(dataUrl).then(function() {
                    resolve(fileRecord);
                  }, reject);
                }, reject);
              });
            };
            FileRecord.readFiles = function(fileRecords) {
              var e_3, _a;
              var promises = [];
              try {
                for (var fileRecords_2 = __values(fileRecords), fileRecords_2_1 = fileRecords_2.next(); !fileRecords_2_1.done; fileRecords_2_1 = fileRecords_2.next()) {
                  var fileRecord = fileRecords_2_1.value;
                  promises.push(FileRecord.readFile(fileRecord));
                }
              } catch (e_3_1) {
                e_3 = { error: e_3_1 };
              } finally {
                try {
                  if (fileRecords_2_1 && !fileRecords_2_1.done && (_a = fileRecords_2.return))
                    _a.call(fileRecords_2);
                } finally {
                  if (e_3)
                    throw e_3.error;
                }
              }
              return Promise.all(promises);
            };
            FileRecord.prototype.createDummyFile = function(data) {
              var file = {};
              file.lastModified = data.lastModified;
              var d = new Date();
              if (file.lastModified) {
                d.setTime(file.lastModified);
              }
              file.lastModifiedDate = d;
              file.name = typeof data.name === "function" ? data.name() : data.name;
              file.size = data.size;
              file.type = data.type;
              return file;
            };
            FileRecord.prototype.hasProgress = function() {
              return !isNaN(this.progressInternal);
            };
            FileRecord.prototype.progress = function(value) {
              if (value !== void 0) {
                this.progressInternal = value;
                return;
              }
              return this.progressInternal || 0;
            };
            FileRecord.prototype.url = function(value) {
              if (value !== void 0) {
                return this.setUrl(value);
              }
              return this.urlValue || void 0;
            };
            FileRecord.prototype.src = function() {
              if (this.isImage()) {
                return this.urlResized || this.urlValue || this.file.url;
              }
              if (this.isPlayableVideo()) {
                return this.videoThumbnail || "";
              }
              return "";
            };
            FileRecord.prototype.size = function() {
              if (!this.file) {
                return "";
              }
              return utils.getSizeFormatted(this.file.size);
            };
            FileRecord.prototype.ext = function() {
              if (this.file && this.file.name.indexOf(".") !== -1) {
                return this.file.name.split(".").pop();
              }
              return "?";
            };
            FileRecord.prototype.name = function(withoutExt) {
              var ext = this.ext();
              if (this.customName) {
                return this.customName + (withoutExt ? "" : ext !== "?" ? "." + ext : "");
              }
              var name = this.file && this.file.name;
              if (withoutExt) {
                if (ext !== "?") {
                  return name.substr(0, name.length - (ext.length + 1));
                }
              }
              return name;
            };
            FileRecord.prototype.isDarkColor = function() {
              if (this.imageColor) {
                var rgb = this.imageColor;
                var darkPoint = 20;
                return rgb[0] <= darkPoint && rgb[1] <= darkPoint && rgb[2] <= darkPoint;
              }
              return false;
            };
            FileRecord.prototype.color = function() {
              if (this.imageColor) {
                var rgb = this.imageColor;
                return "rgb(" + rgb[0] + ", " + rgb[1] + ", " + rgb[2] + ")";
              }
              if (this.isImage()) {
                return "transparent";
              }
              var ext = this.ext();
              var svgIcon = this.icon();
              if (svgIcon.color) {
                return svgIcon.color;
              }
              return utils.getColorForText(ext);
            };
            FileRecord.prototype.isImage = function() {
              return this.file && this.file.type.indexOf("image") !== -1;
            };
            FileRecord.prototype.isVideo = function() {
              return this.file && this.file.type.indexOf("video") !== -1;
            };
            FileRecord.prototype.isPlayableVideo = function() {
              return this.icon().category === "video-playable";
            };
            FileRecord.prototype.isAudio = function() {
              return this.file && this.file.type.indexOf("audio") !== -1;
            };
            FileRecord.prototype.isPlayableAudio = function() {
              return this.icon().category === "audio-playable";
            };
            FileRecord.prototype.isText = function() {
              return this.file && this.file.type.indexOf("text") !== -1;
            };
            FileRecord.prototype.setUrl = function(url) {
              var _this = this;
              this.urlValue = url;
              return new Promise(function(resolve, reject) {
                if (_this.isImage()) {
                  _this.resizeImage().then(function() {
                    resolve(_this);
                  }, function(err) {
                    resolve(_this);
                  });
                  return;
                }
                resolve(_this);
              });
            };
            FileRecord.prototype.imageResized = function(resized) {
              if (!resized) {
                return;
              }
              this.urlResized = resized.url;
              this.image = resized.image;
              if (resized.image && resized.image.width && resized.image.height) {
                this.dimensions.width = resized.image.width;
                this.dimensions.height = resized.image.height;
              }
              this.lastKnownSrc = this.urlResized;
              this.imageColor = resized.color;
            };
            FileRecord.prototype.resizeImage = function() {
              var _this = this;
              return new Promise(function(resolve, reject) {
                utils.resizeImage(_this.thumbnailSize, _this.file, _this.urlValue, _this.calculateAverageColor).then(function(resized) {
                  _this.imageResized(resized);
                  resolve(_this);
                }).catch(reject);
              });
            };
            FileRecord.prototype.icon = function() {
              var ext = this.ext();
              var svgIcon = getIconFromExt(ext);
              return svgIcon;
            };
            FileRecord.prototype.getErrorMessage = function(errorText) {
              var error = this.error;
              if (!error) {
                return "";
              }
              errorText = errorText || {};
              errorText = {
                common: errorText.common || "Invalid file.",
                type: errorText.type || "Invalid file type.",
                size: errorText.size || "Files should not exceed " + this.maxSize + " in size"
              };
              if (error.type) {
                return errorText.type;
              } else if (error.size) {
                return errorText.size;
              } else if (error.upload) {
                return this.upload.error ? this.upload.error : error.upload;
              }
              return errorText.common;
            };
            FileRecord.prototype.toRaw = function() {
              var _this = this;
              var raw = this.raw || {};
              raw.url = this.url.bind(this);
              raw.urlResized = this.urlResized;
              raw.src = this.src.bind(this);
              raw.name = this.name.bind(this);
              raw.lastModified = this.file.lastModified;
              raw.sizeText = this.size();
              raw.size = this.file.size;
              raw.type = this.file.type;
              raw.ext = this.ext();
              raw.color = this.color();
              raw.file = this.file;
              raw.progress = this.progress.bind(this);
              raw.upload = this.upload;
              if (!("error" in raw)) {
                Object.defineProperty(raw, "error", {
                  get: function() {
                    return _this.error;
                  }
                });
              }
              raw.dimensions = this.dimensions;
              return raw;
            };
            FileRecord.prototype.validate = function() {
              var validType = utils.validateType(this.file, this.accept);
              var validSize = utils.validateSize(this.file, this.maxSize);
              if (!validType || !validSize) {
                this.error = {
                  type: !validType,
                  size: !validSize
                };
              } else {
                this.error = false;
              }
            };
            return FileRecord;
          }();
          var file_record = file_record_FileRecord;
          var vue_file_preview_mixin = external_commonjs_vue_commonjs2_vue_root_Vue_default.a.extend({
            props: ["value", "deletable", "editable", "linkable", "errorText", "disabled", "thumbnailSize", "averageColor"],
            components: {
              VueFileIcon: vue_file_icon
            },
            data: function() {
              return {
                isEditInputFocused: false,
                isEditCancelable: true,
                fileRecord: {}
              };
            },
            computed: {
              hasLinkableUrl: function() {
                if (!this.linkable) {
                  return false;
                }
                return !!this.fileRecord.url() && !this.fileRecord.isPlayableVideo() && !this.fileRecord.isPlayableAudio();
              }
            },
            methods: {
              updateFileRecord: function() {
                var _this = this;
                if (this.value instanceof file_record) {
                  this.fileRecord = this.value;
                  return;
                }
                file_record.fromRaw(this.value, {
                  thumbnailSize: this.thumbnailSize,
                  averageColor: this.averageColor
                }).then(function(fileRecord) {
                  _this.fileRecord = fileRecord;
                });
                this.fileRecord = file_record.fromRawSync(this.value, {
                  thumbnailSize: this.thumbnailSize,
                  averageColor: this.averageColor
                });
              },
              createThumbnail: function(fileRecord, video) {
                if (fileRecord.videoThumbnail) {
                  video.poster = fileRecord.src();
                  return;
                }
                var canvas = document.createElement("canvas");
                utils.createVideoThumbnail(video, canvas, this.fileRecord.thumbnailSize, this.averageColor !== false).then(function(thumbnail) {
                  fileRecord.imageColor = thumbnail.color;
                  fileRecord.videoThumbnail = thumbnail.url;
                  fileRecord.dimensions.width = thumbnail.width;
                  fileRecord.dimensions.height = thumbnail.height;
                  video.poster = fileRecord.src();
                });
              },
              playAv: function(fileRecord) {
                if (fileRecord.stopAv) {
                  fileRecord.stopAv();
                  return;
                }
                var createObjectURL = (window.URL || window.webkitURL || {}).createObjectURL;
                var revokeObjectURL = (window.URL || window.webkitURL || {}).revokeObjectURL;
                var wrapper = this.$refs.wrapper;
                var player = document.createElement(fileRecord.isAudio() ? "audio" : "video");
                if (player instanceof HTMLVideoElement && fileRecord.isPlayableVideo()) {
                  this.createThumbnail(fileRecord, player);
                }
                player.controls = true;
                wrapper.appendChild(player);
                var url = fileRecord.url() || createObjectURL(fileRecord.file);
                player.src = url;
                player.play();
                fileRecord.isPlayingAv = true;
                fileRecord.stopAv = function() {
                  player.src = "";
                  wrapper.removeChild(player);
                  revokeObjectURL(url);
                  fileRecord.isPlayingAv = false;
                  fileRecord.stopAv = null;
                };
              },
              removeFileRecord: function(fileRecord) {
                if (this.clearFilename()) {
                  return;
                }
                if (this.disabled === true) {
                  return;
                }
                this.$emit("remove", fileRecord);
              },
              editFileName: function() {
                if (this.editable !== true) {
                  return;
                }
                if (!this.$refs.input) {
                  return;
                }
                this.$refs.input.focus();
              },
              editInputFocused: function() {
                this.isEditInputFocused = true;
                this.isEditCancelable = true;
              },
              editInputBlured: function() {
                var _this = this;
                this.fileRecord.oldFileName = this.fileRecord.name();
                var oldValue = this.fileRecord.name(true);
                var value = this.$refs.input.value;
                this.fileRecord.customName = value;
                var newValue = this.fileRecord.name(true);
                if (newValue !== oldValue) {
                  this.fileRecord.oldCustomName = oldValue;
                  this.$emit("rename", this.fileRecord);
                }
                var timeout = 100;
                setTimeout(function() {
                  _this.$nextTick(function() {
                    if (!_this.isEditCancelable) {
                      return;
                    }
                    _this.isEditInputFocused = false;
                  });
                }, timeout);
              },
              filenameChanged: function(completed) {
                if (completed) {
                  this.$refs.input.blur();
                }
                if (completed === false) {
                  this.clearFilename();
                }
              },
              filenameClearPressed: function() {
                if (!(this.editable === true && this.isEditInputFocused)) {
                  return;
                }
                this.isEditCancelable = false;
              },
              clearFilename: function() {
                if (!(this.editable === true && this.isEditInputFocused)) {
                  return false;
                }
                this.$refs.input.value = "";
                this.isEditCancelable = true;
                this.editInputBlured();
                return true;
              },
              dismissError: function() {
                if (this.fileRecord.error && (this.fileRecord.error.size || this.fileRecord.error.type)) {
                  return;
                }
                this.fileRecord.error = false;
              }
            },
            created: function() {
              this.updateFileRecord();
            },
            watch: {
              value: function() {
                this.updateFileRecord();
              }
            }
          });
          var vue_file_previewvue_type_script_lang_ts_ = external_commonjs_vue_commonjs2_vue_root_Vue_default.a.extend({
            mixins: [vue_file_preview_mixin]
          });
          var components_vue_file_previewvue_type_script_lang_ts_ = vue_file_previewvue_type_script_lang_ts_;
          var vue_file_preview_component = normalizeComponent(components_vue_file_previewvue_type_script_lang_ts_, vue_file_previewvue_type_template_id_89d27d16_render, vue_file_previewvue_type_template_id_89d27d16_staticRenderFns, false, null, null, null);
          var vue_file_preview = vue_file_preview_component.exports;
          var vue_file_listvue_type_template_id_5ef04e06_render = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", [_vm._t("default")], 2);
          };
          var vue_file_listvue_type_template_id_5ef04e06_staticRenderFns = [];
          var vue_file_listvue_type_script_lang_ts_ = external_commonjs_vue_commonjs2_vue_root_Vue_default.a.extend({
            props: ["value", "axis", "appendTo"]
          });
          var components_vue_file_listvue_type_script_lang_ts_ = vue_file_listvue_type_script_lang_ts_;
          var vue_file_list_component = normalizeComponent(components_vue_file_listvue_type_script_lang_ts_, vue_file_listvue_type_template_id_5ef04e06_render, vue_file_listvue_type_template_id_5ef04e06_staticRenderFns, false, null, null, null);
          var vue_file_list = vue_file_list_component.exports;
          var vue_file_list_itemvue_type_template_id_00f7ef53_render = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", [_vm._t("default")], 2);
          };
          var vue_file_list_itemvue_type_template_id_00f7ef53_staticRenderFns = [];
          var vue_file_list_itemvue_type_script_lang_ts_ = external_commonjs_vue_commonjs2_vue_root_Vue_default.a.extend({
            props: ["index"]
          });
          var components_vue_file_list_itemvue_type_script_lang_ts_ = vue_file_list_itemvue_type_script_lang_ts_;
          var vue_file_list_item_component = normalizeComponent(components_vue_file_list_itemvue_type_script_lang_ts_, vue_file_list_itemvue_type_template_id_00f7ef53_render, vue_file_list_itemvue_type_template_id_00f7ef53_staticRenderFns, false, null, null, null);
          var vue_file_list_item = vue_file_list_item_component.exports;
          var vue_file_agentvue_type_template_id_4fc1199c_render = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", { class: [
              "is-sortable-" + (_vm.isSortable ? "enabled" : "disabled"),
              {
                "is-sortable-hold": _vm.sortable === "hold",
                "is-sortable-handle": _vm.sortable === "handle",
                "is-sortable-immediately": _vm.sortable === true,
                "is-sorting": _vm.isSorting,
                "is-sorting-active": _vm.isSortingActive,
                "is-drag-over": _vm.isDragging,
                "is-disabled": _vm.disabled === true,
                "is-readonly": _vm.readonly === true,
                "is-drag-valid": !(_vm.disabled === true || _vm.readonly === true || _vm.hasMultiple && !_vm.canAddMore)
              },
              "theme-" + _vm.theme
            ], attrs: { "id": "vfa-" + _vm.uniqueId }, on: { "dragover": _vm.dragOver, "dragenter": _vm.dragEnter, "dragleave": _vm.dragLeave, "drop": _vm.drop } }, [_vm._t("before-outer"), _c("div", { staticClass: "grid-block-wrapper vue-file-agent file-input-wrapper", class: {
              "is-compact": !!_vm.compact,
              "is-single": !_vm.hasMultiple,
              "has-multiple": _vm.hasMultiple,
              "no-meta": _vm.meta === false
            } }, [_vm._t("before-inner"), _c("canvas", { ref: "thumbnailCanvas", staticStyle: { "position": "fixed", "visibility": "hidden", "z-index": "-3" } }), _vm.overallProgress ? _c("div", { staticClass: "overall-progress", class: { "overall-progress-full": _vm.overallProgress >= 100 } }, [_c("div", { staticClass: "overall-progress-bar", style: { width: _vm.overallProgress + "%" } }), _c("div", { staticClass: "overall-progress-left", style: { width: 100 - _vm.overallProgress + "%" } })]) : _vm._e(), _c(_vm.isSortable ? "vfa-sortable-list" : "VueFileList", { tag: "component", attrs: { "axis": _vm.theme == "list" ? "y" : "xy", "appendTo": "#vfa-" + _vm.uniqueId + " .vue-file-agent", "transitionDuration": _vm.transitionDuration, "pressDelay": _vm.sortable === "hold" ? 200 : 0, "useDragHandle": _vm.sortable === "handle", "helperClass": "active-sorting-item" }, on: { "sort-start": function($event) {
              return _vm.sortStart();
            }, "sort-end": function($event) {
              return _vm.sortEnd($event);
            } }, model: { value: _vm.fileRecords, callback: function($$v) {
              _vm.fileRecords = $$v;
            }, expression: "fileRecords" } }, [_c("transition-group", { attrs: { "name": "grid-box", "tag": "div" } }, [_vm._l(_vm.fileRecords, function(fileRecord, index2) {
              return _c(_vm.isSortable ? "vfa-sortable-item" : "VueFileListItem", { key: fileRecord.id, tag: "component", staticClass: "file-preview-wrapper grid-box-item grid-block", attrs: { "index": index2 } }, [_vm.sortable === "handle" ? _c("span", { directives: [{ name: "vfa-sortable-handle", rawName: "v-vfa-sortable-handle" }], staticClass: "file-sortable-handle" }, [_vm._t("sortable-handle", [_c("VueFileIcon", { attrs: { "name": "system-sortable-handle" } })])], 2) : _vm._e(), _vm._t("file-preview", [_c("VueFilePreview", { attrs: { "averageColor": _vm.averageColor, "value": fileRecord, "deletable": _vm.isDeletable, "editable": _vm.editable === true, "linkable": _vm.linkable === true, "errorText": _vm.errorText, "disabled": _vm.disabled, "thumbnailSize": _vm.thumbnailSize }, on: { "remove": function($event) {
                return _vm.removeFileRecord($event);
              }, "rename": function($event) {
                return _vm.filenameChanged($event);
              } } })], { "fileRecord": fileRecord, "fileData": fileRecord, "index": index2 })], 2);
            }), _vm.canAddMore && _vm.readonly !== true ? [_vm._t("file-preview-new", [_c("div", { key: "new", staticClass: "file-preview-wrapper grid-box-item grid-block file-preview-new" }, [_c("span", { staticClass: "file-preview" }, [_c("span", { staticStyle: { "position": "absolute", "top": "0", "right": "0", "bottom": "0", "left": "0" } }, [_c("VueFileIcon", { attrs: { "name": "system-file-preview-new" } }), _c("span", { staticClass: "help-text" }, [_vm._v(_vm._s(_vm.helpTextComputed))])], 1)])])])] : _vm._e()], 2)], 1), _vm.readonly !== true ? _c("input", { ref: "fileInput", staticClass: "file-input", attrs: { "title": "", "disabled": _vm.disabled === true || _vm.hasMultiple && !_vm.canAddMore, "type": "file", "multiple": _vm.hasMultiple, "accept": _vm.accept || "*", "capture": _vm.capture || void 0 }, on: { "change": _vm.filesChanged } }) : _vm._e(), _vm._t("after-inner")], 2), _vm._t("after-outer")], 2);
          };
          var vue_file_agentvue_type_template_id_4fc1199c_staticRenderFns = [];
          var AjaxRequest = function() {
            function AjaxRequest2() {
            }
            AjaxRequest2.prototype.createError = function(message, code, request, response) {
              var error = new Error(message);
              error.error = true;
              if (code) {
                error.code = code;
              }
              error.request = request;
              error.response = response;
              return error;
            };
            AjaxRequest2.prototype.settle = function(resolve, reject, response) {
              var validateStatus = function(status) {
                return status >= 200 && status < 300;
              };
              if (!response.status || !validateStatus || validateStatus(response.status)) {
                resolve(response);
              } else {
                reject(this.createError("Request failed with status code " + response.status, null, response.request, response));
              }
            };
            AjaxRequest2.prototype.request = function(method, url, formData, configureFn) {
              var _this = this;
              if (formData === void 0) {
                formData = null;
              }
              return new Promise(function(resolve, reject) {
                var request = new XMLHttpRequest();
                var loadEvent = "onreadystatechange";
                request.open(method, url, true);
                request[loadEvent] = function() {
                  if (!request || request.readyState !== 4) {
                    return;
                  }
                  if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                    return;
                  }
                  var responseHeaders = request.getAllResponseHeaders();
                  var responseData = request.responseText;
                  var contentType = request.getResponseHeader("Content-Type");
                  if (contentType && contentType.indexOf("application/json") !== -1) {
                    responseData = JSON.parse(responseData);
                  } else {
                    try {
                      responseData = JSON.parse(responseData);
                    } catch (e) {
                    }
                  }
                  var response = {
                    data: responseData,
                    status: request.status === 1223 ? 204 : request.status,
                    statusText: request.status === 1223 ? "No Content" : request.statusText,
                    headers: responseHeaders,
                    request
                  };
                  _this.settle(resolve, reject, response);
                  request = null;
                };
                request.onabort = function() {
                  if (!request) {
                    return;
                  }
                  reject(_this.createError("Request aborted", "ECONNABORTED", request));
                  request = null;
                };
                request.onerror = function() {
                  reject(_this.createError("Network Error", null, request));
                  request = null;
                };
                request.ontimeout = function() {
                  reject(_this.createError("timeout exceeded", "ECONNABORTED", request));
                  request = null;
                };
                if (typeof configureFn === "function") {
                  configureFn(request);
                }
                request.send(formData);
              });
            };
            AjaxRequest2.prototype.post = function(url, formData, configureFn) {
              return this.request("POST", url, formData, configureFn);
            };
            AjaxRequest2.prototype.delete = function(url, formData, configureFn) {
              return this.request("DELETE", url, formData, configureFn);
            };
            AjaxRequest2.prototype.put = function(url, formData, configureFn) {
              return this.request("PUT", url, formData, configureFn);
            };
            return AjaxRequest2;
          }();
          var ajax_request = new AjaxRequest();
          var upload_helper_UploadHelper = function() {
            function UploadHelper() {
            }
            UploadHelper.prototype.addHeaders = function(xhr, headers) {
              xhr.setRequestHeader("Accept", "application/json");
              if (headers) {
                for (var key in headers) {
                  if (headers.hasOwnProperty(key)) {
                    xhr.setRequestHeader(key, headers[key]);
                  }
                }
              }
              return xhr;
            };
            UploadHelper.prototype.doUpload = function(url, headers, formData, progressCallback, configureFn) {
              var _this = this;
              return ajax_request.post(url, formData, function(xhr) {
                _this.addHeaders(xhr, headers);
                xhr.upload.addEventListener("progress", progressCallback, false);
                if (typeof configureFn === "function") {
                  configureFn(xhr);
                }
              });
            };
            UploadHelper.prototype.doDeleteUpload = function(url, headers, uploadData, configureFn) {
              var _this = this;
              if (typeof uploadData !== "string") {
                uploadData = JSON.stringify(uploadData);
              }
              return ajax_request.delete(url, uploadData, function(xhr) {
                xhr.setRequestHeader("Content-Type", "application/json");
                _this.addHeaders(xhr, headers);
                if (typeof configureFn === "function") {
                  configureFn(xhr);
                }
              });
            };
            UploadHelper.prototype.doUpdateUpload = function(url, headers, uploadData, configureFn) {
              var _this = this;
              if (typeof uploadData !== "string") {
                uploadData = JSON.stringify(uploadData);
              }
              return ajax_request.put(url, uploadData, function(xhr) {
                xhr.setRequestHeader("Content-Type", "application/json");
                _this.addHeaders(xhr, headers);
                if (typeof configureFn === "function") {
                  configureFn(xhr);
                }
              });
            };
            UploadHelper.prototype.prepareUploadError = function(fileRecord, err, timeout) {
              var errorText = err.message;
              if (err.response && err.response.data) {
                try {
                  var errorMsg = err.response.data.error || JSON.parse(err.response.data).error;
                  errorText = errorMsg;
                } catch (e) {
                }
              }
              if (!fileRecord.error) {
                fileRecord.error = {};
              }
              fileRecord.error.upload = errorText;
              fileRecord.upload.data = void 0;
              fileRecord.upload.error = errorText;
              if (timeout) {
                setTimeout(function() {
                  if (!fileRecord.error) {
                    fileRecord.error = {};
                  }
                  fileRecord.error.upload = false;
                  if (!fileRecord.error.size && !fileRecord.error.type) {
                    fileRecord.error = false;
                  }
                }, timeout);
              }
            };
            UploadHelper.prototype.upload = function(url, headers, fileRecords, createFormData, progressFn, configureFn) {
              var e_1, _a;
              var _this = this;
              var updateOverallProgress = function() {
              };
              if (progressFn) {
                updateOverallProgress = function() {
                  var e_2, _a2;
                  var prgTotal = 0;
                  try {
                    for (var fileRecords_2 = __values(fileRecords), fileRecords_2_1 = fileRecords_2.next(); !fileRecords_2_1.done; fileRecords_2_1 = fileRecords_2.next()) {
                      var fileRecord2 = fileRecords_2_1.value;
                      prgTotal += fileRecord2.progress();
                    }
                  } catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                  } finally {
                    try {
                      if (fileRecords_2_1 && !fileRecords_2_1.done && (_a2 = fileRecords_2.return))
                        _a2.call(fileRecords_2);
                    } finally {
                      if (e_2)
                        throw e_2.error;
                    }
                  }
                  progressFn(prgTotal / fileRecords.length);
                };
              }
              var promises = [];
              var failedUploadsCount = 0;
              var _loop_1 = function(fileRecord2) {
                var formData = void 0;
                if (typeof createFormData === "function") {
                  formData = createFormData(fileRecord2);
                } else {
                  formData = new FormData();
                  formData.append("file", fileRecord2.file);
                  formData.append("filename", fileRecord2.name());
                }
                var promise = this_1.doUpload(url, headers, formData, function(progressEvent) {
                  var percentCompleted = progressEvent.loaded * 100 / progressEvent.total;
                  fileRecord2.progress(percentCompleted >= 100 ? 99.9999 : percentCompleted);
                  updateOverallProgress();
                }, function(xhr) {
                  fileRecord2.xhr = xhr;
                  if (typeof configureFn === "function") {
                    configureFn(xhr);
                  }
                });
                promises.push(new Promise(function(resolve, reject) {
                  promise.then(function(response) {
                    delete fileRecord2.xhr;
                    fileRecord2.upload.data = response.data;
                    fileRecord2.upload.error = false;
                    fileRecord2.progress(100);
                    if (fileRecord2.xhrQueue) {
                      fileRecord2.xhrQueue();
                      delete fileRecord2.xhrQueue;
                    }
                    resolve(response);
                  }, function(err) {
                    _this.prepareUploadError(fileRecord2, err);
                    resolve(err);
                    failedUploadsCount++;
                  });
                }));
              };
              var this_1 = this;
              try {
                for (var fileRecords_1 = __values(fileRecords), fileRecords_1_1 = fileRecords_1.next(); !fileRecords_1_1.done; fileRecords_1_1 = fileRecords_1.next()) {
                  var fileRecord = fileRecords_1_1.value;
                  _loop_1(fileRecord);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (fileRecords_1_1 && !fileRecords_1_1.done && (_a = fileRecords_1.return))
                    _a.call(fileRecords_1);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              return new Promise(function(resolve, reject) {
                Promise.all(promises).then(function(responses) {
                  if (failedUploadsCount === promises.length) {
                    reject(responses);
                    return;
                  }
                  resolve(responses);
                }, reject);
              });
            };
            UploadHelper.prototype.deleteUpload = function(url, headers, fileRecord, uploadData, configureFn) {
              var _this = this;
              return new Promise(function(resolve, reject) {
                if (fileRecord.xhr) {
                  fileRecord.xhr.abort();
                }
                if (uploadData === void 0) {
                  uploadData = fileRecord.upload.data;
                }
                if (uploadData) {
                  _this.doDeleteUpload(url, headers, uploadData, function(xhr) {
                    if (typeof configureFn === "function") {
                      configureFn(xhr);
                    }
                  }).then(function(result) {
                    resolve(result);
                  }, function(err) {
                    _this.prepareUploadError(fileRecord, err);
                    reject(err);
                  });
                }
              });
            };
            UploadHelper.prototype.updateUpload = function(url, headers, fileRecord, uploadData, configureFn) {
              var _this = this;
              return new Promise(function(resolve, reject) {
                if (fileRecord.xhr) {
                  fileRecord.xhrQueue = function() {
                    _this.updateUpload(url, headers, fileRecord, uploadData);
                  };
                  return resolve();
                }
                if (uploadData === void 0) {
                  uploadData = fileRecord.upload.data || {};
                  uploadData.old_filename = fileRecord.oldFileName;
                  uploadData.filename = fileRecord.name();
                }
                if (uploadData) {
                  _this.doUpdateUpload(url, headers, uploadData, function(xhr) {
                    if (typeof configureFn === "function") {
                      configureFn(xhr);
                    }
                  }).then(function(response) {
                    fileRecord.upload.data = response.data;
                    fileRecord.upload.error = false;
                    resolve(response);
                  }, function(err) {
                    _this.prepareUploadError(fileRecord, err);
                    reject(err);
                  });
                }
              });
            };
            UploadHelper.prototype.doTusUpload = function(tus, url, fileRecord, headers, progressCallback, tusOptionsFn) {
              var tusOptions = tusOptionsFn ? tusOptionsFn(fileRecord) : {};
              return new Promise(function(resolve, reject) {
                if (!tus) {
                  return reject(new Error("tus required. Please install tus-js-client"));
                }
                var file = fileRecord.file;
                var upload = new tus.Upload(file, {
                  endpoint: url,
                  headers,
                  retryDelays: tusOptions.retryDelays ? tusOptions.retryDelays : [0, 3e3, 5e3, 1e4, 2e4],
                  metadata: tusOptions.metadata ? tusOptions.metadata : {
                    filename: file.name,
                    filetype: file.type
                  },
                  onError: function(error) {
                    reject(error);
                  },
                  onProgress: function(bytesUploaded, bytesTotal) {
                    var event = { loaded: bytesUploaded, total: bytesTotal };
                    progressCallback(event);
                  },
                  onSuccess: function() {
                    resolve(upload);
                  }
                });
                fileRecord.tusUpload = upload;
                upload.start();
              });
            };
            UploadHelper.prototype.tusUpload = function(tus, url, headers, fileRecords, progressFn, tusOptionsFn) {
              var e_3, _a;
              var _this = this;
              var updateOverallProgress = function() {
              };
              if (progressFn) {
                updateOverallProgress = function() {
                  var e_4, _a2;
                  var prgTotal = 0;
                  try {
                    for (var fileRecords_4 = __values(fileRecords), fileRecords_4_1 = fileRecords_4.next(); !fileRecords_4_1.done; fileRecords_4_1 = fileRecords_4.next()) {
                      var fileRecord2 = fileRecords_4_1.value;
                      prgTotal += fileRecord2.progress();
                    }
                  } catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                  } finally {
                    try {
                      if (fileRecords_4_1 && !fileRecords_4_1.done && (_a2 = fileRecords_4.return))
                        _a2.call(fileRecords_4);
                    } finally {
                      if (e_4)
                        throw e_4.error;
                    }
                  }
                  progressFn(prgTotal / fileRecords.length);
                };
              }
              var promises = [];
              var _loop_2 = function(fileRecord2) {
                var promise = this_2.doTusUpload(tus, url, fileRecord2, headers, function(progressEvent) {
                  var percentCompleted = progressEvent.loaded * 100 / progressEvent.total;
                  fileRecord2.progress(percentCompleted >= 100 ? 99.9999 : percentCompleted);
                  updateOverallProgress();
                }, tusOptionsFn);
                promise.then(function(response) {
                  fileRecord2.progress(100);
                }, function(err) {
                  _this.prepareUploadError(fileRecord2, err);
                });
                promises.push(promise);
              };
              var this_2 = this;
              try {
                for (var fileRecords_3 = __values(fileRecords), fileRecords_3_1 = fileRecords_3.next(); !fileRecords_3_1.done; fileRecords_3_1 = fileRecords_3.next()) {
                  var fileRecord = fileRecords_3_1.value;
                  _loop_2(fileRecord);
                }
              } catch (e_3_1) {
                e_3 = { error: e_3_1 };
              } finally {
                try {
                  if (fileRecords_3_1 && !fileRecords_3_1.done && (_a = fileRecords_3.return))
                    _a.call(fileRecords_3);
                } finally {
                  if (e_3)
                    throw e_3.error;
                }
              }
              return Promise.all(promises);
            };
            UploadHelper.prototype.tusDeleteUpload = function(tus, url, headers, fileRecord) {
              var _this = this;
              return new Promise(function(resolve, reject) {
                if (!tus) {
                  return reject("tus required");
                }
                if (!fileRecord.tusUpload) {
                  return resolve();
                }
                var abort = function(shouldTerminate) {
                  return new Promise(function(res, rej) {
                    fileRecord.tusUpload.abort(shouldTerminate, function(err) {
                      if (err) {
                        _this.prepareUploadError(fileRecord, err);
                        rej(err);
                        return;
                      }
                      res();
                    });
                  });
                };
                abort(false).then(function() {
                  setTimeout(function() {
                    abort(true).then(resolve, reject);
                  }, 1e3);
                });
              });
            };
            return UploadHelper;
          }();
          var upload_helper = new upload_helper_UploadHelper();
          var plugins = {
            tus: null
          };
          var dragCounter = 0;
          var vue_file_agent_mixin = external_commonjs_vue_commonjs2_vue_root_Vue_default.a.extend({
            props: [
              "accept",
              "auto",
              "averageColor",
              "capture",
              "compact",
              "deletable",
              "disabled",
              "editable",
              "errorText",
              "helpText",
              "linkable",
              "maxFiles",
              "maxSize",
              "meta",
              "multiple",
              "progress",
              "read",
              "readonly",
              "resumable",
              "sortable",
              "theme",
              "thumbnailSize",
              "uploadConfig",
              "uploadHeaders",
              "uploadUrl",
              "uploadWithCredentials",
              "value"
            ],
            components: {
              VueFileIcon: vue_file_icon,
              VueFilePreview: vue_file_preview,
              VueFileList: vue_file_list,
              VueFileListItem: vue_file_list_item
            },
            directives: {
              vfaSortableHandle: {
                bind: function(el) {
                  el.sortableHandle = true;
                }
              }
            },
            data: function() {
              return {
                fileRecords: [],
                rawFileRecords: [],
                isDragging: false,
                isSorting: false,
                isSortingActive: false,
                transitionDuration: 300,
                overallProgress: 0,
                uniqueId: "",
                sortTimeout: 0
              };
            },
            computed: {
              canAddMore: function() {
                if (!this.hasMultiple) {
                  return this.fileRecords.length === 0;
                }
                if (!this.maxFiles) {
                  return true;
                }
                return this.fileRecords.length < this.maxFiles;
              },
              helpTextComputed: function() {
                if (this.helpText) {
                  return this.helpText;
                }
                return "Choose " + (this.hasMultiple ? "files" : "file") + " or drag & drop here";
              },
              isDeletable: function() {
                if (typeof this.deletable === "string") {
                  return this.deletable !== "false";
                }
                return !!this.deletable;
              },
              isSortable: function() {
                return !!this.sortable;
              },
              hasMultiple: function() {
                if (typeof this.multiple === "string") {
                  return this.multiple !== "false";
                }
                if (this.multiple === void 0) {
                  return Array.isArray(this.value);
                }
                return !!this.multiple;
              },
              shouldRead: function() {
                if (typeof this.read === "string") {
                  return this.read === "true";
                }
                return !!this.read;
              }
            },
            methods: {
              createThumbnail: function(fileRecord, video) {
                var _this = this;
                return new Promise(function(resolve, reject) {
                  var canvas = document.createElement("canvas");
                  utils.createVideoThumbnail(video, canvas, fileRecord.thumbnailSize, _this.averageColor !== false).then(function(thumbnail) {
                    fileRecord.imageColor = thumbnail.color;
                    fileRecord.videoThumbnail = thumbnail.url;
                    fileRecord.dimensions.width = thumbnail.width;
                    fileRecord.dimensions.height = thumbnail.height;
                    resolve();
                  }, reject);
                });
              },
              initVideo: function(fileRecord) {
                if (!fileRecord.isPlayableVideo()) {
                  return;
                }
                var createObjectURL = (window.URL || window.webkitURL || {}).createObjectURL;
                var revokeObjectURL = (window.URL || window.webkitURL || {}).revokeObjectURL;
                var video = document.createElement("video");
                video.src = createObjectURL(fileRecord.file);
                this.createThumbnail(fileRecord, video).then(function() {
                  revokeObjectURL(video.src);
                });
                video.load();
              },
              getFileRecordOrRawInstance: function(fileRecordOrRaw, raw) {
                var i;
                if (fileRecordOrRaw instanceof file_record) {
                  i = this.fileRecords.indexOf(fileRecordOrRaw);
                } else {
                  i = this.rawFileRecords.indexOf(fileRecordOrRaw);
                }
                if (i === -1) {
                  return fileRecordOrRaw;
                }
                return raw ? this.rawFileRecords[i] : this.fileRecords[i];
              },
              getFileRecordRawInstance: function(fileRecordOrRaw) {
                return this.getFileRecordOrRawInstance(fileRecordOrRaw, true);
              },
              getFileRecordInstance: function(fileRecordOrRaw) {
                return this.getFileRecordOrRawInstance(fileRecordOrRaw, false);
              },
              prepareConfigureFn: function(configureXhr) {
                var uploadWithCredentials = this.uploadWithCredentials;
                if (uploadWithCredentials !== true && uploadWithCredentials !== false) {
                  return configureXhr;
                }
                return function(request) {
                  request.withCredentials = uploadWithCredentials;
                  if (typeof configureXhr === "function") {
                    configureXhr(request);
                  }
                };
              },
              upload: function(url, headers, fileRecordsOrRaw, createFormData, configureXhr) {
                var e_1, _a;
                var _this = this;
                var validFileRecords = [];
                var validFilesRawData = [];
                try {
                  for (var fileRecordsOrRaw_1 = __values(fileRecordsOrRaw), fileRecordsOrRaw_1_1 = fileRecordsOrRaw_1.next(); !fileRecordsOrRaw_1_1.done; fileRecordsOrRaw_1_1 = fileRecordsOrRaw_1.next()) {
                    var fileRecordOrRaw = fileRecordsOrRaw_1_1.value;
                    var fileRecord = this.getFileRecordInstance(fileRecordOrRaw);
                    if (!fileRecord.error) {
                      validFileRecords.push(fileRecord);
                      validFilesRawData.push(this.getFileRecordRawInstance(fileRecord));
                    }
                  }
                } catch (e_1_1) {
                  e_1 = { error: e_1_1 };
                } finally {
                  try {
                    if (fileRecordsOrRaw_1_1 && !fileRecordsOrRaw_1_1.done && (_a = fileRecordsOrRaw_1.return))
                      _a.call(fileRecordsOrRaw_1);
                  } finally {
                    if (e_1)
                      throw e_1.error;
                  }
                }
                if (this.resumable) {
                  return upload_helper.tusUpload(plugins.tus, url, headers, validFileRecords, function(overallProgress) {
                    _this.overallProgress = overallProgress;
                  }, this.resumable === true ? void 0 : this.resumable);
                }
                return new Promise(function(resolve, reject) {
                  upload_helper.upload(url, headers, validFileRecords, createFormData, function(overallProgress) {
                    _this.overallProgress = overallProgress;
                  }, _this.prepareConfigureFn(configureXhr)).then(function(res) {
                    for (var i = 0; i < res.length; i++) {
                      res[i].fileRecord = validFilesRawData[i];
                    }
                    _this.$emit("upload", res);
                    resolve(res);
                  }, function(err) {
                    for (var i = 0; i < err.length; i++) {
                      err[i].fileRecord = validFilesRawData[i];
                    }
                    _this.$emit("upload:error", err);
                    reject(err);
                  });
                });
              },
              deleteUpload: function(url, headers, fileRecordOrRaw, uploadData, configureXhr) {
                var _this = this;
                if (this.fileRecords.length < 1) {
                  this.overallProgress = 0;
                }
                var fileRecord = this.getFileRecordInstance(fileRecordOrRaw);
                var rawFileRecord = this.getFileRecordRawInstance(fileRecordOrRaw);
                if (this.resumable) {
                  return upload_helper.tusDeleteUpload(plugins.tus, url, headers, fileRecord);
                }
                return new Promise(function(resolve, reject) {
                  upload_helper.deleteUpload(url, headers, fileRecord, uploadData, _this.prepareConfigureFn(configureXhr)).then(function(res) {
                    res.fileRecord = rawFileRecord;
                    _this.$emit("upload:delete", res);
                    resolve(res);
                  }, function(err) {
                    err.fileRecord = rawFileRecord;
                    _this.$emit("upload:delete:error", err);
                    reject(err);
                  });
                });
              },
              updateUpload: function(url, headers, fileRecord, uploadData, configureXhr) {
                var _this = this;
                fileRecord = this.getFileRecordInstance(fileRecord);
                var rawFileRecord = this.getFileRecordRawInstance(fileRecord);
                return new Promise(function(resolve, reject) {
                  upload_helper.updateUpload(url, headers, fileRecord, uploadData, _this.prepareConfigureFn(configureXhr)).then(function(res) {
                    res.fileRecords = rawFileRecord;
                    _this.$emit("upload:update", res);
                    resolve(res);
                  }, function(err) {
                    err.fileRecords = rawFileRecord;
                    _this.$emit("upload:update:error", err);
                    reject(err);
                  });
                });
              },
              autoUpload: function(fileRecords) {
                if (!this.uploadUrl || this.auto === false) {
                  return Promise.resolve(false);
                }
                return this.upload(this.uploadUrl, this.uploadHeaders, fileRecords, this.uploadConfig);
              },
              autoDeleteUpload: function(fileRecord) {
                if (!this.uploadUrl || this.auto === false) {
                  return Promise.resolve(false);
                }
                return this.deleteUpload(this.uploadUrl, this.uploadHeaders, fileRecord, this.uploadConfig);
              },
              autoUpdateUpload: function(fileRecord) {
                if (!this.uploadUrl || this.auto === false) {
                  return Promise.resolve(false);
                }
                return this.updateUpload(this.uploadUrl, this.uploadHeaders, fileRecord, this.uploadConfig);
              },
              equalFiles: function(file1, file2) {
                return file1.name === file2.name && file1.size === file2.size && file1.type === file2.type && file1.lastModified === file2.lastModified;
              },
              isFileAddedAlready: function(file) {
                var e_2, _a;
                try {
                  for (var _b = __values(this.fileRecords), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var fileRecord = _c.value;
                    if (this.equalFiles(file, fileRecord.file)) {
                      return true;
                    }
                  }
                } catch (e_2_1) {
                  e_2 = { error: e_2_1 };
                } finally {
                  try {
                    if (_c && !_c.done && (_a = _b.return))
                      _a.call(_b);
                  } finally {
                    if (e_2)
                      throw e_2.error;
                  }
                }
                return false;
              },
              handleFiles: function(files) {
                var e_3, _a, e_4, _b, _c;
                var _this = this;
                if (this.disabled === true || this.readonly === true) {
                  return;
                }
                if (this.hasMultiple && !this.canAddMore) {
                  return;
                }
                var fileRecords = [];
                var filesFiltered = [];
                for (var i = 0; i < files.length; i++) {
                  if (this.hasMultiple && this.isFileAddedAlready(files[i])) {
                    continue;
                  }
                  filesFiltered.push(files[i]);
                }
                files = filesFiltered;
                if (this.hasMultiple && this.maxFiles && files.length > this.maxFiles - this.fileRecords.length) {
                  files = files.slice(0, this.maxFiles - this.fileRecords.length);
                }
                try {
                  for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {
                    var file = files_1_1.value;
                    fileRecords.push(new file_record({
                      file
                    }, {
                      read: this.shouldRead,
                      maxSize: this.maxSize,
                      accept: this.accept,
                      thumbnailSize: this.thumbnailSize,
                      averageColor: this.averageColor
                    }));
                  }
                } catch (e_3_1) {
                  e_3 = { error: e_3_1 };
                } finally {
                  try {
                    if (files_1_1 && !files_1_1.done && (_a = files_1.return))
                      _a.call(files_1);
                  } finally {
                    if (e_3)
                      throw e_3.error;
                  }
                }
                try {
                  for (var fileRecords_1 = __values(fileRecords), fileRecords_1_1 = fileRecords_1.next(); !fileRecords_1_1.done; fileRecords_1_1 = fileRecords_1.next()) {
                    var fileRecord = fileRecords_1_1.value;
                    if (fileRecord.file.size <= 20 * 1024 * 1024) {
                      this.initVideo(fileRecord);
                    }
                  }
                } catch (e_4_1) {
                  e_4 = { error: e_4_1 };
                } finally {
                  try {
                    if (fileRecords_1_1 && !fileRecords_1_1.done && (_b = fileRecords_1.return))
                      _b.call(fileRecords_1);
                  } finally {
                    if (e_4)
                      throw e_4.error;
                  }
                }
                if (this.hasMultiple) {
                  (_c = this.fileRecords).splice.apply(_c, __spread([this.fileRecords.length, 0], fileRecords));
                } else {
                  this.fileRecords = fileRecords;
                }
                file_record.readFiles(fileRecords).then(function(fileRecordsNew) {
                  var allFileRecordsRaw = file_record.toRawArray(_this.fileRecords);
                  _this.rawFileRecords = allFileRecordsRaw;
                  _this.$emit("input", Array.isArray(_this.value) ? allFileRecordsRaw : allFileRecordsRaw[0]);
                  _this.$emit("select", file_record.toRawArray(fileRecordsNew));
                });
                this.autoUpload(fileRecords);
              },
              filesChanged: function(event) {
                var files = event.target.files;
                this.$emit("change", event);
                if (!files[0]) {
                  return;
                }
                if (!this.hasMultiple) {
                  files = [files[0]];
                }
                this.handleFiles(files);
                if (this.$refs.fileInput) {
                  this.$refs.fileInput.value = null;
                }
              },
              drop: function(event) {
                var _this = this;
                event.stopPropagation();
                event.preventDefault();
                dragCounter = 0;
                this.isDragging = false;
                if (this.disabled === true || this.readonly === true) {
                  return;
                }
                if (!event.dataTransfer) {
                  return;
                }
                utils.getFilesFromDroppedItems(event.dataTransfer).then(function(files) {
                  _this.$emit("drop", event);
                  if (!files || !files[0]) {
                    return;
                  }
                  if (!_this.hasMultiple) {
                    files = [files[0]];
                  }
                  _this.handleFiles(files);
                });
              },
              dragEnter: function(event) {
                if (!event.dataTransfer) {
                  return;
                }
                this.isDragging = true;
                event.stopPropagation();
                event.preventDefault();
                dragCounter++;
                event.dataTransfer.dropEffect = "copy";
              },
              dragOver: function(event) {
                if (!event.dataTransfer) {
                  return;
                }
                this.isDragging = true;
                event.stopPropagation();
                event.preventDefault();
                event.dataTransfer.dropEffect = "copy";
              },
              dragLeave: function(event) {
                if (!event.dataTransfer) {
                  return;
                }
                dragCounter--;
                if (dragCounter === 0) {
                  this.isDragging = false;
                }
              },
              removeFileRecord: function(fileRecordOrRaw) {
                var rawFileRecord = this.getFileRecordRawInstance(fileRecordOrRaw);
                this.$emit("beforedelete", rawFileRecord);
                if (!this.uploadUrl || this.auto === false) {
                  return;
                }
                this.deleteFileRecord(fileRecordOrRaw);
              },
              deleteFileRecord: function(fileRecordOrRaw) {
                var _this = this;
                var i;
                if (fileRecordOrRaw instanceof file_record) {
                  i = this.fileRecords.indexOf(fileRecordOrRaw);
                } else {
                  i = this.rawFileRecords.indexOf(fileRecordOrRaw);
                }
                var fileRecord = this.fileRecords[i];
                var rawFileRecord = this.rawFileRecords[i];
                this.$emit("input", this.rawFileRecords);
                this.$emit("delete", rawFileRecord);
                fileRecord = this.fileRecords.splice(i, 1)[0];
                rawFileRecord = this.rawFileRecords.splice(i, 1)[0];
                this.autoDeleteUpload(fileRecord).then(function(res) {
                }, function(err) {
                  _this.fileRecords.splice(i, 1, fileRecord);
                  _this.rawFileRecords.splice(i, 1, rawFileRecord);
                });
              },
              filenameChanged: function(fileRecord) {
                this.$emit("rename", file_record.toRawArray([fileRecord])[0]);
                this.autoUpdateUpload(fileRecord).then(function(res) {
                }, function(err) {
                  fileRecord.customName = fileRecord.oldCustomName;
                });
              },
              checkValue: function() {
                var _this = this;
                var rawFileRecords = this.value || [];
                rawFileRecords = Array.isArray(rawFileRecords) ? rawFileRecords : [rawFileRecords];
                var fdPromises = [];
                var rawFileRecordsNew = [];
                for (var i = 0; i < rawFileRecords.length; i++) {
                  var existingIndex = this.rawFileRecords.indexOf(rawFileRecords[i]);
                  if (existingIndex !== -1) {
                    fdPromises.push(Promise.resolve(this.fileRecords[existingIndex]));
                    rawFileRecordsNew[i] = this.rawFileRecords[existingIndex];
                  } else {
                    fdPromises.push(file_record.fromRaw(rawFileRecords[i], {
                      read: this.shouldRead,
                      maxSize: this.maxSize,
                      accept: this.accept,
                      thumbnailSize: this.thumbnailSize,
                      averageColor: this.averageColor
                    }));
                    rawFileRecordsNew.push(rawFileRecords[i]);
                  }
                }
                this.rawFileRecords = rawFileRecordsNew;
                Promise.all(fdPromises).then(function(fileRecords) {
                  _this.fileRecords = fileRecords;
                });
              },
              sortStart: function() {
                if (this.sortTimeout) {
                  clearTimeout(this.sortTimeout);
                }
                this.isSorting = true;
                this.isSortingActive = true;
              },
              sortEnd: function(sortData) {
                var _this = this;
                this.isSortingActive = false;
                if (this.sortTimeout) {
                  clearTimeout(this.sortTimeout);
                }
                this.sortTimeout = setTimeout(function() {
                  _this.isSorting = false;
                }, this.transitionDuration + 100);
                if (sortData.oldIndex !== sortData.newIndex) {
                  this.rawFileRecords = utils.arrayMove(this.rawFileRecords, sortData.oldIndex, sortData.newIndex);
                  this.$nextTick(function() {
                    _this.$emit("input", _this.rawFileRecords);
                    _this.$emit("sort", {
                      oldIndex: sortData.oldIndex,
                      newIndex: sortData.newIndex
                    });
                  });
                }
              }
            },
            created: function() {
              this.uniqueId = new Date().getTime().toString(36) + Math.random().toString(36).slice(2);
              this.checkValue();
            },
            watch: {
              value: function() {
                this.checkValue();
              }
            }
          });
          var vue_file_agentvue_type_script_lang_ts_ = external_commonjs_vue_commonjs2_vue_root_Vue_default.a.extend({
            mixins: [vue_file_agent_mixin]
          });
          var components_vue_file_agentvue_type_script_lang_ts_ = vue_file_agentvue_type_script_lang_ts_;
          var vue_file_agentvue_type_style_index_0_lang_scss_ = __webpack_require__("6816");
          var vue_file_agent_component = normalizeComponent(components_vue_file_agentvue_type_script_lang_ts_, vue_file_agentvue_type_template_id_4fc1199c_render, vue_file_agentvue_type_template_id_4fc1199c_staticRenderFns, false, null, null, null);
          var vue_file_agent = vue_file_agent_component.exports;
          var src_VueFileAgentPlugin = function() {
            function VueFileAgentPlugin() {
              this.VueFileIcon = vue_file_icon;
              this.VueFilePreview = vue_file_preview;
              this.VueFileAgent = vue_file_agent;
              this.component = vue_file_agent;
              this.mixin = vue_file_agent_mixin;
              this.plugins = plugins;
              this.VueFileAgentMixin = vue_file_agent_mixin;
              this.VueFilePreviewMixin = vue_file_preview_mixin;
              this.install = function(Vue2, options) {
                Vue2.component("VueFileIcon", vue_file_icon);
                Vue2.component("VueFilePreview", vue_file_preview);
                Vue2.component("VueFileList", vue_file_list);
                Vue2.component("VueFileListItem", vue_file_list_item);
                Vue2.component("VueFileAgent", vue_file_agent);
                Vue2.prototype.$vueFileAgent = {
                  mixin: vue_file_agent_mixin
                };
              };
            }
            return VueFileAgentPlugin;
          }();
          var vfaPlugin = new src_VueFileAgentPlugin();
          if (typeof window !== "undefined" && window.Vue) {
            vfaPlugin.install(window.Vue, {});
            window.VueFileAgent = vfaPlugin;
          }
          var mixin = vue_file_agent_mixin;
          var FileData = file_record;
          var src_0 = vfaPlugin;
          var entry_lib = __webpack_exports__["default"] = src_0;
        }
      });
    });
  }
});

// dep:vue-file-agent
var vue_file_agent_default = require_vue_file_agent_umd();
export {
  vue_file_agent_default as default
};
/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
//# sourceMappingURL=vue-file-agent.js.map
